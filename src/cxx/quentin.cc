/*
	 Copyright (c) 2019 Norsk rikskringkasting AS (NRK)

	 This file is part of Sofie: The Modern TV News Studio Automation
	 System (Quantel gateway)

	 This program is free software; you can redistribute it and/or modify
	 it under the terms of the GNU General Public License as published by
	 the Free Software Foundation; either version 2 of the License, or
	 (at your option) any later version.

	 This program is distributed in the hope that it will be useful,
	 but WITHOUT ANY WARRANTY; without even the implied warranty of
	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 GNU General Public License for more details.

	 You should have received a copy of the GNU General Public License along
	 with this program; if not, write to the Free Software Foundation, Inc.,
	 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Quentin.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;


_init_in_def_( const ::CORBA::Long Quentin::maxNumber = 9999; )

_init_in_def_( const ::CORBA::Long Quentin::noNumber = -1; )

_init_in_def_( const ::CORBA::Long Quentin::noTicket = 0; )

_init_in_def_( const ::CORBA::Long Quentin::defaultAspect = 0; )

_init_in_def_( const ::CORBA::Long Quentin::aspect16x9 = 1; )

_init_in_def_( const ::CORBA::Long Quentin::aspect4x3 = 2; )

_init_in_def_( const ::CORBA::Long Quentin::defaultPlayMode = 0; )

_init_in_def_( const ::CORBA::Long Quentin::box = 1; )

_init_in_def_( const ::CORBA::Long Quentin::cut = 2; )

_init_in_def_( const ::CORBA::Long Quentin::anamorphic = 3; )

_init_in_def_( const ::CORBA::Long Quentin::play14x9 = 4; )

_init_in_def_( const ::CORBA::Long Quentin::frameVideo = 1; )

_init_in_def_( const ::CORBA::Long Quentin::playModeOverride = 8; )

_init_in_def_( const ::CORBA::Long Quentin::playModeShift = 4; )

_init_in_def_( const ::CORBA::Long Quentin::aspectShift = 12; )

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagOriginator = L"Q_Originator";
}
#else
const ::CORBA::WChar * Quentin::TagOriginator = L"Q_Originator";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagRecordServer = L"Q_RecordServer";
}
#else
const ::CORBA::WChar * Quentin::TagRecordServer = L"Q_RecordServer";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagRecordChannel = L"Q_RecordChannel";
}
#else
const ::CORBA::WChar * Quentin::TagRecordChannel = L"Q_RecordChannel";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagRecordTime = L"Q_RecordTime";
}
#else
const ::CORBA::WChar * Quentin::TagRecordTime = L"Q_RecordTime";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagSceneChange = L"Q_SceneChange";
}
#else
const ::CORBA::WChar * Quentin::TagSceneChange = L"Q_SceneChange";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagPixelAspect = L"Q_PixelAspect";
}
#else
const ::CORBA::WChar * Quentin::TagPixelAspect = L"Q_PixelAspect";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagCropRectangle = L"Q_CropRectangle";
}
#else
const ::CORBA::WChar * Quentin::TagCropRectangle = L"Q_CropRectangle";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagMatch = L"Q_Match";
}
#else
const ::CORBA::WChar * Quentin::TagMatch = L"Q_Match";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagValidVideo = L"Q_ValidVideo";
}
#else
const ::CORBA::WChar * Quentin::TagValidVideo = L"Q_ValidVideo";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagFreezeMode = L"Q_FreezeMode";
}
#else
const ::CORBA::WChar * Quentin::TagFreezeMode = L"Q_FreezeMode";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagRecordRate = L"Q_RecordRate";
}
#else
const ::CORBA::WChar * Quentin::TagRecordRate = L"Q_RecordRate";
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage othewise.
namespace Quentin {
  extern const ::CORBA::WChar * TagStereo3D = L"Q_Stereo3D";
}
#else
const ::CORBA::WChar * Quentin::TagStereo3D = L"Q_Stereo3D";
#endif

void
Quentin::RushIdent::operator>>= (cdrStream &_n) const
{
  first >>= _n;
  second >>= _n;

}

void
Quentin::RushIdent::operator<<= (cdrStream &_n)
{
  (::CORBA::LongLong&)first <<= _n;
  (::CORBA::LongLong&)second <<= _n;

}

void
Quentin::ClipProperty::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(name,0);
  _n.marshalWString(value,0);

}

void
Quentin::ClipProperty::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalWString(0);
  value = _n.unmarshalWString(0);

}

void
Quentin::SortOrder::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(name,0);
  direction >>= _n;

}

void
Quentin::SortOrder::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalWString(0);
  (SortDirection&)direction <<= _n;

}

void
Quentin::ServerInfo::operator>>= (cdrStream &_n) const
{
  ident >>= _n;
  _n.marshalBoolean(down);
  numChannels >>= _n;
  (const Longs&) pools >>= _n;
  _n.marshalWString(name,0);

}

void
Quentin::ServerInfo::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)ident <<= _n;
  down = _n.unmarshalBoolean();
  (::CORBA::Long&)numChannels <<= _n;
  (Longs&)pools <<= _n;
  name = _n.unmarshalWString(0);

}

void
Quentin::PoolInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalBoolean(down);
  ident >>= _n;
  capacity >>= _n;
  _n.marshalWString(name,0);

}

void
Quentin::PoolInfo::operator<<= (cdrStream &_n)
{
  down = _n.unmarshalBoolean();
  (::CORBA::Long&)ident <<= _n;
  (::CORBA::LongLong&)capacity <<= _n;
  name = _n.unmarshalWString(0);

}

void
Quentin::PortInfo::operator>>= (cdrStream &_n) const
{
  Server_Helper::marshalObjRef(portServer,_n);
  serverIdent >>= _n;
  _n.marshalWString(name,0);
  number >>= _n;
  (const Longs&) numTracks >>= _n;

}

void
Quentin::PortInfo::operator<<= (cdrStream &_n)
{
  portServer = Server_Helper::unmarshalObjRef(_n);
  (::CORBA::Long&)serverIdent <<= _n;
  name = _n.unmarshalWString(0);
  (::CORBA::Long&)number <<= _n;
  (Longs&)numTracks <<= _n;

}

void
Quentin::StateChangeInfo::operator>>= (cdrStream &_n) const
{
  type >>= _n;
  ident >>= _n;
  changeNum >>= _n;

}

void
Quentin::StateChangeInfo::operator<<= (cdrStream &_n)
{
  (StateChangeType&)type <<= _n;
  (::CORBA::Long&)ident <<= _n;
  (::CORBA::Long&)changeNum <<= _n;

}

void
Quentin::CopyProgress::operator>>= (cdrStream &_n) const
{
  clipID >>= _n;
  totalProtons >>= _n;
  protonsLeft >>= _n;
  secsLeft >>= _n;
  priority >>= _n;
  _n.marshalBoolean(ticketed);

}

void
Quentin::CopyProgress::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)clipID <<= _n;
  (::CORBA::Long&)totalProtons <<= _n;
  (::CORBA::Long&)protonsLeft <<= _n;
  (::CORBA::Long&)secsLeft <<= _n;
  (::CORBA::Long&)priority <<= _n;
  ticketed = _n.unmarshalBoolean();

}

void
Quentin::CopyMapElement::operator>>= (cdrStream &_n) const
{
  flags >>= _n;
  protons >>= _n;
  frames >>= _n;

}

void
Quentin::CopyMapElement::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)flags <<= _n;
  (::CORBA::Long&)protons <<= _n;
  (::CORBA::Long&)frames <<= _n;

}

void
Quentin::RushTag::operator>>= (cdrStream &_n) const
{
  (const RushIdent&) rushID >>= _n;
  start >>= _n;
  finish >>= _n;
  _n.marshalWString(tagtype,0);
  _n.marshalWString(info,0);

}

void
Quentin::RushTag::operator<<= (cdrStream &_n)
{
  (RushIdent&)rushID <<= _n;
  (::CORBA::Long&)start <<= _n;
  (::CORBA::Long&)finish <<= _n;
  tagtype = _n.unmarshalWString(0);
  info = _n.unmarshalWString(0);

}

void
Quentin::RushTimecode::operator>>= (cdrStream &_n) const
{
  start >>= _n;
  finish >>= _n;
  portTimecode >>= _n;
  userBits >>= _n;
  refTimecode >>= _n;

}

void
Quentin::RushTimecode::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)start <<= _n;
  (::CORBA::Long&)finish <<= _n;
  (Timecode&)portTimecode <<= _n;
  (::CORBA::Long&)userBits <<= _n;
  (Timecode&)refTimecode <<= _n;

}

void
Quentin::ColumnDesc::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(columnName,0);
  _n.marshalWString(columnType,0);
  _n.marshalWString(alias,0);
  _n.marshalBoolean(alterable);
  _n.marshalBoolean(creatable);
  _n.marshalBoolean(searchable);
  _n.marshalBoolean(clones);

}

void
Quentin::ColumnDesc::operator<<= (cdrStream &_n)
{
  columnName = _n.unmarshalWString(0);
  columnType = _n.unmarshalWString(0);
  alias = _n.unmarshalWString(0);
  alterable = _n.unmarshalBoolean();
  creatable = _n.unmarshalBoolean();
  searchable = _n.unmarshalBoolean();
  clones = _n.unmarshalBoolean();

}

void
Quentin::ConfigDescription::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(description,0);
  configNumber >>= _n;
  protonsPerFrame >>= _n;

}

void
Quentin::ConfigDescription::operator<<= (cdrStream &_n)
{
  description = _n.unmarshalWString(0);
  (::CORBA::Long&)configNumber <<= _n;
  (::CORBA::Float&)protonsPerFrame <<= _n;

}

void
Quentin::FullClipID::operator>>= (cdrStream &_n) const
{
  zone >>= _n;
  clipID >>= _n;

}

void
Quentin::FullClipID::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)zone <<= _n;
  (::CORBA::Long&)clipID <<= _n;

}

void
Quentin::PlaceholderData::operator>>= (cdrStream &_n) const
{
  clipID >>= _n;
  poolID >>= _n;
  zoneID >>= _n;
  _n.marshalWString(extData,0);

}

void
Quentin::PlaceholderData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)clipID <<= _n;
  (::CORBA::Long&)poolID <<= _n;
  (::CORBA::Long&)zoneID <<= _n;
  extData = _n.unmarshalWString(0);

}

_init_in_def_( const ::CORBA::Long Quentin::lastEssenceTrack = 7; )

_init_in_def_( const ::CORBA::Long Quentin::lastLinearTrack = 14; )

void
Quentin::PositionData::operator>>= (cdrStream &_n) const
{
  format >>= _n;
  poolID >>= _n;
  poolFrame >>= _n;
  skew >>= _n;
  (const RushIdent&) rushID >>= _n;
  rushFrame >>= _n;

}

void
Quentin::PositionData::operator<<= (cdrStream &_n)
{
  (FormatCode&)format <<= _n;
  (::CORBA::Long&)poolID <<= _n;
  (::CORBA::LongLong&)poolFrame <<= _n;
  (::CORBA::Short&)skew <<= _n;
  (RushIdent&)rushID <<= _n;
  (::CORBA::Long&)rushFrame <<= _n;

}

void
Quentin::ServerFlagsFragment::operator>>= (cdrStream &_n) const
{
  flags >>= _n;

}

void
Quentin::ServerFlagsFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)flags <<= _n;

}

void
Quentin::ServerTimecodeFragment::operator>>= (cdrStream &_n) const
{
  startTimecode >>= _n;
  userBits >>= _n;

}

void
Quentin::ServerTimecodeFragment::operator<<= (cdrStream &_n)
{
  (Timecode&)startTimecode <<= _n;
  (::CORBA::Long&)userBits <<= _n;

}

void
Quentin::ServerAspectFragment::operator>>= (cdrStream &_n) const
{
  width >>= _n;
  height >>= _n;

}

void
Quentin::ServerAspectFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)height <<= _n;

}

void
Quentin::ServerCropFragment::operator>>= (cdrStream &_n) const
{
  x >>= _n;
  y >>= _n;
  width >>= _n;
  height >>= _n;

}

void
Quentin::ServerCropFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)x <<= _n;
  (::CORBA::Long&)y <<= _n;
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)height <<= _n;

}

void
Quentin::ServerPanZoomFragment::operator>>= (cdrStream &_n) const
{
  x >>= _n;
  y >>= _n;
  hZoom >>= _n;
  vZoom >>= _n;

}

void
Quentin::ServerPanZoomFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)x <<= _n;
  (::CORBA::Long&)y <<= _n;
  (::CORBA::Long&)hZoom <<= _n;
  (::CORBA::Long&)vZoom <<= _n;

}

void
Quentin::ServerSpeedFragment::operator>>= (cdrStream &_n) const
{
  speed >>= _n;
  profile >>= _n;

}

void
Quentin::ServerSpeedFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)speed <<= _n;
  (::CORBA::Long&)profile <<= _n;

}

void
Quentin::ServerMultiCamFragment::operator>>= (cdrStream &_n) const
{
  stream >>= _n;

}

void
Quentin::ServerMultiCamFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)stream <<= _n;

}

void
Quentin::ServerNoteFragment::operator>>= (cdrStream &_n) const
{
  noteID >>= _n;
  aux >>= _n;
  mask >>= _n;
  _n.marshalWString(note,0);

}

void
Quentin::ServerNoteFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)noteID <<= _n;
  (::CORBA::Long&)aux <<= _n;
  (::CORBA::Long&)mask <<= _n;
  note = _n.unmarshalWString(0);

}

void
Quentin::ServerEffectFragment::operator>>= (cdrStream &_n) const
{
  effectID >>= _n;
  (const RawData&) effectData >>= _n;

}

void
Quentin::ServerEffectFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)effectID <<= _n;
  (RawData&)effectData <<= _n;

}

_init_in_def_( const ::CORBA::Long Quentin::extFragSpeed = 0; )

_init_in_def_( const ::CORBA::Long Quentin::extFragPanZoom = 1; )

_init_in_def_( const ::CORBA::Long Quentin::extFragMultiCam = 32; )

_init_in_def_( const ::CORBA::Long Quentin::extFragCEA608 = 256; )

void
Quentin::ServerCCFragment::operator>>= (cdrStream &_n) const
{
  (const RushIdent&) ccID >>= _n;
  ccType >>= _n;
  (const RawData&) ccData >>= _n;

}

void
Quentin::ServerCCFragment::operator<<= (cdrStream &_n)
{
  (RushIdent&)ccID <<= _n;
  (::CORBA::Long&)ccType <<= _n;
  (RawData&)ccData <<= _n;

}

void
Quentin::ServerFragmentData::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  if (_pd__default) {

  }
  else {
    switch(_pd__d) {
      case videoFragment:
        (const PositionData&) _pd_videoFragmentData >>= _n;
        break;
      case audioFragment:
        (const PositionData&) _pd_audioFragmentData >>= _n;
        break;
      case auxFragment:
        (const PositionData&) _pd_auxFragmentData >>= _n;
        break;
      case flagsFragment:
        (const ServerFlagsFragment&) _pd_flagsFragmentData >>= _n;
        break;
      case timecodeFragment:
        (const ServerTimecodeFragment&) _pd_timecodeFragmentData >>= _n;
        break;
      case aspectFragment:
        (const ServerAspectFragment&) _pd_aspectFragmentData >>= _n;
        break;
      case cropFragment:
        (const ServerCropFragment&) _pd_cropFragmentData >>= _n;
        break;
      case noteFragment:
        (const ServerNoteFragment&) _pd_noteFragmentData >>= _n;
        break;
      case effectFragment:
        (const ServerEffectFragment&) _pd_effectFragmentData >>= _n;
        break;
      case panZoomFragment:
        (const ServerPanZoomFragment&) _pd_panZoomFragmentData >>= _n;
        break;
      case speedFragment:
        (const ServerSpeedFragment&) _pd_speedFragmentData >>= _n;
        break;
      case multiCamFragment:
        (const ServerMultiCamFragment&) _pd_multiCamFragmentData >>= _n;
        break;
      case ccFragment:
        (const ServerCCFragment&) _pd_ccFragmentData >>= _n;
        break;
      default: break;


    }
  }


}

void
Quentin::ServerFragmentData::operator<<= (cdrStream& _n)
{
  (FragmentType&)_pd__d <<= _n;

  switch(_pd__d) {
    case videoFragment:
      _pd__default = 0;
      (PositionData&)_pd_videoFragmentData <<= _n;
      break;
    case audioFragment:
      _pd__default = 0;
      (PositionData&)_pd_audioFragmentData <<= _n;
      break;
    case auxFragment:
      _pd__default = 0;
      (PositionData&)_pd_auxFragmentData <<= _n;
      break;
    case flagsFragment:
      _pd__default = 0;
      (ServerFlagsFragment&)_pd_flagsFragmentData <<= _n;
      break;
    case timecodeFragment:
      _pd__default = 0;
      (ServerTimecodeFragment&)_pd_timecodeFragmentData <<= _n;
      break;
    case aspectFragment:
      _pd__default = 0;
      (ServerAspectFragment&)_pd_aspectFragmentData <<= _n;
      break;
    case cropFragment:
      _pd__default = 0;
      (ServerCropFragment&)_pd_cropFragmentData <<= _n;
      break;
    case noteFragment:
      _pd__default = 0;
      (ServerNoteFragment&)_pd_noteFragmentData <<= _n;
      break;
    case effectFragment:
      _pd__default = 0;
      (ServerEffectFragment&)_pd_effectFragmentData <<= _n;
      break;
    case panZoomFragment:
      _pd__default = 0;
      (ServerPanZoomFragment&)_pd_panZoomFragmentData <<= _n;
      break;
    case speedFragment:
      _pd__default = 0;
      (ServerSpeedFragment&)_pd_speedFragmentData <<= _n;
      break;
    case multiCamFragment:
      _pd__default = 0;
      (ServerMultiCamFragment&)_pd_multiCamFragmentData <<= _n;
      break;
    case ccFragment:
      _pd__default = 0;
      (ServerCCFragment&)_pd_ccFragmentData <<= _n;
      break;
    default:
      _pd__default = 1;
      break;

  }
  _pd__initialised = 1;
}

void
Quentin::ServerFragment::operator>>= (cdrStream &_n) const
{
  trackNum >>= _n;
  start >>= _n;
  finish >>= _n;
  (const ServerFragmentData&) fragmentData >>= _n;

}

void
Quentin::ServerFragment::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)trackNum <<= _n;
  (::CORBA::Long&)start <<= _n;
  (::CORBA::Long&)finish <<= _n;
  (ServerFragmentData&)fragmentData <<= _n;

}

void
Quentin::FormatInfo::operator>>= (cdrStream &_n) const
{
  formatNumber >>= _n;
  essenceType >>= _n;
  frameRate >>= _n;
  height >>= _n;
  width >>= _n;
  samples >>= _n;
  compressionFamily >>= _n;
  protonsPerAtom >>= _n;
  framesPerAtom >>= _n;
  quark >>= _n;
  _n.marshalWString(formatName,0);
  _n.marshalWString(layoutName,0);
  _n.marshalWString(compressionName,0);

}

void
Quentin::FormatInfo::operator<<= (cdrStream &_n)
{
  (FormatCode&)formatNumber <<= _n;
  (FragmentType&)essenceType <<= _n;
  (::CORBA::Long&)frameRate <<= _n;
  (::CORBA::Long&)height <<= _n;
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)samples <<= _n;
  (::CORBA::Long&)compressionFamily <<= _n;
  (::CORBA::Long&)protonsPerAtom <<= _n;
  (::CORBA::Long&)framesPerAtom <<= _n;
  (::CORBA::Long&)quark <<= _n;
  formatName = _n.unmarshalWString(0);
  layoutName = _n.unmarshalWString(0);
  compressionName = _n.unmarshalWString(0);

}

const ::CORBA::WChar * Quentin::Properties::idlImplementation = L"IdlImplementation";

const ::CORBA::WChar * Quentin::Properties::softwareVersion = L"SoftwareVersion";

const ::CORBA::WChar * Quentin::Properties::serialNumber = L"SerialNumber";

const ::CORBA::WChar * Quentin::Properties::name = L"Name";

const ::CORBA::WChar * Quentin::Properties::location = L"EngineeringName";

const ::CORBA::WChar * Quentin::Properties::frameRate = L"FrameRate";

const ::CORBA::WChar * Quentin::Properties::redAlert = L"RedAlert";

const ::CORBA::WChar * Quentin::Properties::amberAlert = L"AmberAlert";

const ::CORBA::WChar * Quentin::Properties::consoleURI = L"ConsoleURI";

const ::CORBA::WChar * Quentin::Properties::isDummyServer = L"IsDummyServer";

const ::CORBA::WChar * Quentin::Properties::searchPath = L"SearchPath";

Quentin::Properties_ptr Quentin::Properties_Helper::_nil() {
  return ::Quentin::Properties::_nil();
}

::CORBA::Boolean Quentin::Properties_Helper::is_nil(::Quentin::Properties_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::Properties_Helper::release(::Quentin::Properties_ptr p) {
  ::CORBA::release(p);
}

void Quentin::Properties_Helper::marshalObjRef(::Quentin::Properties_ptr obj, cdrStream& s) {
  ::Quentin::Properties::_marshalObjRef(obj, s);
}

Quentin::Properties_ptr Quentin::Properties_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::Properties::_unmarshalObjRef(s);
}

void Quentin::Properties_Helper::duplicate(::Quentin::Properties_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::Properties_ptr
Quentin::Properties::_duplicate(::Quentin::Properties_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::Properties_ptr
Quentin::Properties::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::Properties_ptr
Quentin::Properties::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::Properties_ptr
Quentin::Properties::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Properties _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Properties* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Properties;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::Properties::_PD_repoId = "IDL:Quentin/Properties:1.0";


Quentin::_objref_Properties::~_objref_Properties() {

}


Quentin::_objref_Properties::_objref_Properties(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::Properties::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
Quentin::_objref_Properties::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::Properties_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::Properties_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cwstring_i_cwstring
class _0RL_cd_33742A71C73D0017_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::WString_var result;
};

void _0RL_cd_33742A71C73D0017_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_33742A71C73D0017_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_33742A71C73D0017_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalWString(result,0);

}

void _0RL_cd_33742A71C73D0017_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalWString(0);

}

const char* const _0RL_cd_33742A71C73D0017_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_00000000* tcd = (_0RL_cd_33742A71C73D0017_00000000*)cd;
  Quentin::_impl_Properties* impl = (Quentin::_impl_Properties*) svnt->_ptrToInterface(Quentin::Properties::_PD_repoId);
  tcd->result = impl->getProperty(tcd->arg_0);


}

::CORBA::WChar* Quentin::_objref_Properties::getProperty(const ::CORBA::WChar* propertyName)
{
  _0RL_cd_33742A71C73D0017_00000000 _call_desc(_0RL_lcfn_33742A71C73D0017_10000000, "getProperty", 12);
  _call_desc.arg_0 = propertyName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings
class _0RL_cd_33742A71C73D0017_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_20000000* tcd = (_0RL_cd_33742A71C73D0017_20000000*)cd;
  Quentin::_impl_Properties* impl = (Quentin::_impl_Properties*) svnt->_ptrToInterface(Quentin::Properties::_PD_repoId);
  tcd->result = impl->getPropertyList();


}

Quentin::WStrings* Quentin::_objref_Properties::getPropertyList()
{
  _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_30000000, "getPropertyList", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
Quentin::_pof_Properties::~_pof_Properties() {}


omniObjRef*
Quentin::_pof_Properties::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_Properties(ior, id);
}


::CORBA::Boolean
Quentin::_pof_Properties::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::Properties::_PD_repoId) )
    return 1;

  return 0;
}

const Quentin::_pof_Properties _the_pof_Quentin_mProperties;

Quentin::_impl_Properties::~_impl_Properties() {}


::CORBA::Boolean
Quentin::_impl_Properties::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getProperty") ) {

    _0RL_cd_33742A71C73D0017_00000000 _call_desc(_0RL_lcfn_33742A71C73D0017_10000000, "getProperty", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPropertyList") ) {

    _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_30000000, "getPropertyList", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Quentin::_impl_Properties::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::_impl_Properties*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::_impl_Properties*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_Properties::_mostDerivedRepoId()
{
  return ::Quentin::Properties::_PD_repoId;
}

Quentin::EffectController_ptr Quentin::EffectController_Helper::_nil() {
  return ::Quentin::EffectController::_nil();
}

::CORBA::Boolean Quentin::EffectController_Helper::is_nil(::Quentin::EffectController_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::EffectController_Helper::release(::Quentin::EffectController_ptr p) {
  ::CORBA::release(p);
}

void Quentin::EffectController_Helper::marshalObjRef(::Quentin::EffectController_ptr obj, cdrStream& s) {
  ::Quentin::EffectController::_marshalObjRef(obj, s);
}

Quentin::EffectController_ptr Quentin::EffectController_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::EffectController::_unmarshalObjRef(s);
}

void Quentin::EffectController_Helper::duplicate(::Quentin::EffectController_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::EffectController_ptr
Quentin::EffectController::_duplicate(::Quentin::EffectController_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::EffectController_ptr
Quentin::EffectController::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::EffectController_ptr
Quentin::EffectController::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::EffectController_ptr
Quentin::EffectController::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_EffectController _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_EffectController* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_EffectController;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::EffectController::_PD_repoId = "IDL:Quentin/EffectController:1.0";


Quentin::_objref_EffectController::~_objref_EffectController() {

}


Quentin::_objref_EffectController::_objref_EffectController(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::EffectController::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
Quentin::_objref_EffectController::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::EffectController::_PD_repoId )
    return (::Quentin::EffectController_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::EffectController::_PD_repoId) )
    return (::Quentin::EffectController_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cwstring
class _0RL_cd_33742A71C73D0017_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::WString_var result;
};

void _0RL_cd_33742A71C73D0017_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalWString(result,0);

}

void _0RL_cd_33742A71C73D0017_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalWString(0);

}

const char* const _0RL_cd_33742A71C73D0017_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_40000000* tcd = (_0RL_cd_33742A71C73D0017_40000000*)cd;
  Quentin::_impl_EffectController* impl = (Quentin::_impl_EffectController*) svnt->_ptrToInterface(Quentin::EffectController::_PD_repoId);
  tcd->result = impl->getName();


}

::CORBA::WChar* Quentin::_objref_EffectController::getName()
{
  _0RL_cd_33742A71C73D0017_40000000 _call_desc(_0RL_lcfn_33742A71C73D0017_50000000, "getName", 8);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _clong
class _0RL_cd_33742A71C73D0017_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_60000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_EffectController* impl = (Quentin::_impl_EffectController*) svnt->_ptrToInterface(Quentin::EffectController::_PD_repoId);
  tcd->result = impl->getVersion();


}

::CORBA::Long Quentin::_objref_EffectController::getVersion()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_70000000, "getVersion", 11);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_33742A71C73D0017_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }




  static const char* const _user_exns[];


};

const char* const _0RL_cd_33742A71C73D0017_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_90000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_EffectController* impl = (Quentin::_impl_EffectController*) svnt->_ptrToInterface(Quentin::EffectController::_PD_repoId);
  impl->reset();


}

void Quentin::_objref_EffectController::reset()
{
  _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_90000000, "reset", 6);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mRawData
class _0RL_cd_33742A71C73D0017_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::RawData_var result;
};

void _0RL_cd_33742A71C73D0017_a0000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::RawData&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::RawData;
  (Quentin::RawData&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a0000000* tcd = (_0RL_cd_33742A71C73D0017_a0000000*)cd;
  Quentin::_impl_EffectController* impl = (Quentin::_impl_EffectController*) svnt->_ptrToInterface(Quentin::EffectController::_PD_repoId);
  tcd->result = impl->getState();


}

Quentin::RawData* Quentin::_objref_EffectController::getState()
{
  _0RL_cd_33742A71C73D0017_a0000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b0000000, "getState", 9);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mRawData
class _0RL_cd_33742A71C73D0017_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_c0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::RawData_var arg_0_;
  const Quentin::RawData* arg_0;
};

void _0RL_cd_33742A71C73D0017_c0000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::RawData&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_c0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::RawData;
  (Quentin::RawData&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_c0000000* tcd = (_0RL_cd_33742A71C73D0017_c0000000*)cd;
  Quentin::_impl_EffectController* impl = (Quentin::_impl_EffectController*) svnt->_ptrToInterface(Quentin::EffectController::_PD_repoId);
  impl->setState(*tcd->arg_0);


}

void Quentin::_objref_EffectController::setState(const ::Quentin::RawData& state)
{
  _0RL_cd_33742A71C73D0017_c0000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d0000000, "setState", 9);
  _call_desc.arg_0 = &(::Quentin::RawData&) state;

  _invoke(_call_desc);



}
Quentin::_pof_EffectController::~_pof_EffectController() {}


omniObjRef*
Quentin::_pof_EffectController::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_EffectController(ior, id);
}


::CORBA::Boolean
Quentin::_pof_EffectController::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::EffectController::_PD_repoId) )
    return 1;

  return 0;
}

const Quentin::_pof_EffectController _the_pof_Quentin_mEffectController;

Quentin::_impl_EffectController::~_impl_EffectController() {}


::CORBA::Boolean
Quentin::_impl_EffectController::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getName") ) {

    _0RL_cd_33742A71C73D0017_40000000 _call_desc(_0RL_lcfn_33742A71C73D0017_50000000, "getName", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getVersion") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_70000000, "getVersion", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset") ) {

    _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_90000000, "reset", 6, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getState") ) {

    _0RL_cd_33742A71C73D0017_a0000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b0000000, "getState", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setState") ) {

    _0RL_cd_33742A71C73D0017_c0000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d0000000, "setState", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Quentin::_impl_EffectController::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::EffectController::_PD_repoId )
    return (::Quentin::_impl_EffectController*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::EffectController::_PD_repoId) )
    return (::Quentin::_impl_EffectController*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_EffectController::_mostDerivedRepoId()
{
  return ::Quentin::EffectController::_PD_repoId;
}

void
Quentin::ChannelCapabilities::operator>>= (cdrStream &_n) const
{
  chanNumber >>= _n;
  type >>= _n;
  inputCount >>= _n;
  outputCount >>= _n;
  generalFeatures >>= _n;
  recordFeatures >>= _n;
  playFeatures >>= _n;

}

void
Quentin::ChannelCapabilities::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)chanNumber <<= _n;
  (ChannelType&)type <<= _n;
  (::CORBA::Long&)inputCount <<= _n;
  (::CORBA::Long&)outputCount <<= _n;
  (::CORBA::LongLong&)generalFeatures <<= _n;
  (::CORBA::LongLong&)recordFeatures <<= _n;
  (::CORBA::LongLong&)playFeatures <<= _n;

}

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_GEN_OVERLAY = _CORBA_LONGLONG_CONST(1); )

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_REC_AUTOSIZE = _CORBA_LONGLONG_CONST(1); )

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_REC_AIR = _CORBA_LONGLONG_CONST(2); )

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_PLAY_SUBFRAME_JOG = _CORBA_LONGLONG_CONST(1); )

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_PLAY_LIVE_CLAMP = _CORBA_LONGLONG_CONST(2); )

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_PLAY_AUDIO_16CH = _CORBA_LONGLONG_CONST(256); )

_init_in_def_( const ::CORBA::LongLong Quentin::CHANCAP_PLAY_AUDIO_32CH = _CORBA_LONGLONG_CONST(512); )

void
Quentin::ServerCapabilities::operator>>= (cdrStream &_n) const
{
  productID >>= _n;
  features >>= _n;
  (const ChannelCapabilitiesList&) channelCapabilities >>= _n;

}

void
Quentin::ServerCapabilities::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)productID <<= _n;
  (::CORBA::LongLong&)features <<= _n;
  (ChannelCapabilitiesList&)channelCapabilities <<= _n;

}

_init_in_def_( const ::CORBA::LongLong Quentin::SVRCAP_REMOTE_PRELOAD_SQ = _CORBA_LONGLONG_CONST(1); )

_init_in_def_( const ::CORBA::LongLong Quentin::SVRCAP_REMOTE_PRELOAD_REVQ = _CORBA_LONGLONG_CONST(2); )

void
Quentin::AudioPatchInfo::operator>>= (cdrStream &_n) const
{
  dst >>= _n;
  src >>= _n;
  level >>= _n;

}

void
Quentin::AudioPatchInfo::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)dst <<= _n;
  (::CORBA::Long&)src <<= _n;
  (::CORBA::Float&)level <<= _n;

}

::CORBA::Exception::insertExceptionToAny Quentin::InvalidFragments::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::InvalidFragments::insertToAnyFnNCP = 0;

Quentin::InvalidFragments::InvalidFragments(const Quentin::InvalidFragments& _s) : ::CORBA::UserException(_s)
{
  invalids = _s.invalids;

}

Quentin::InvalidFragments::InvalidFragments(const ServerFragments _invalids)
{
  pd_insertToAnyFn    = Quentin::InvalidFragments::insertToAnyFn;
  pd_insertToAnyFnNCP = Quentin::InvalidFragments::insertToAnyFnNCP;
  invalids = _invalids;

}



Quentin::InvalidFragments& Quentin::InvalidFragments::operator=(const Quentin::InvalidFragments& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalids = _s.invalids;

  return *this;
}

Quentin::InvalidFragments::~InvalidFragments() {}

void Quentin::InvalidFragments::_raise() const { throw *this; }

const char* Quentin::InvalidFragments::_PD_repoId = "IDL:Quentin/InvalidFragments:1.0";
const char* Quentin::InvalidFragments::_PD_typeId = "Exception/UserException/Quentin::InvalidFragments";

Quentin::InvalidFragments* Quentin::InvalidFragments::_downcast(::CORBA::Exception* _e) {
  return (InvalidFragments*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::InvalidFragments* Quentin::InvalidFragments::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidFragments*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::InvalidFragments::_NP_duplicate() const {
  return new InvalidFragments(*this);
}

const char* Quentin::InvalidFragments::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::InvalidFragments::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/InvalidFragments:1.0");
  return _PD_repoId;
}

void Quentin::InvalidFragments::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
Quentin::InvalidFragments::operator>>= (cdrStream& _n) const
{
  (const ServerFragments&) invalids >>= _n;

}

void
Quentin::InvalidFragments::operator<<= (cdrStream& _n)
{
  (ServerFragments&)invalids <<= _n;

}

::CORBA::Exception::insertExceptionToAny Quentin::DatabaseError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::DatabaseError::insertToAnyFnNCP = 0;

Quentin::DatabaseError::DatabaseError(const Quentin::DatabaseError& _s) : ::CORBA::UserException(_s)
{
  error = _s.error;

}

Quentin::DatabaseError::DatabaseError(const ::CORBA::WChar* _error)
{
  pd_insertToAnyFn    = Quentin::DatabaseError::insertToAnyFn;
  pd_insertToAnyFnNCP = Quentin::DatabaseError::insertToAnyFnNCP;
  error = _error;

}



Quentin::DatabaseError& Quentin::DatabaseError::operator=(const Quentin::DatabaseError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  error = _s.error;

  return *this;
}

Quentin::DatabaseError::~DatabaseError() {}

void Quentin::DatabaseError::_raise() const { throw *this; }

const char* Quentin::DatabaseError::_PD_repoId = "IDL:Quentin/DatabaseError:1.0";
const char* Quentin::DatabaseError::_PD_typeId = "Exception/UserException/Quentin::DatabaseError";

Quentin::DatabaseError* Quentin::DatabaseError::_downcast(::CORBA::Exception* _e) {
  return (DatabaseError*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::DatabaseError* Quentin::DatabaseError::_downcast(const ::CORBA::Exception* _e) {
  return (const DatabaseError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::DatabaseError::_NP_duplicate() const {
  return new DatabaseError(*this);
}

const char* Quentin::DatabaseError::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::DatabaseError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/DatabaseError:1.0");
  return _PD_repoId;
}

void Quentin::DatabaseError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
Quentin::DatabaseError::operator>>= (cdrStream& _n) const
{
  _n.marshalWString(error,0);

}

void
Quentin::DatabaseError::operator<<= (cdrStream& _n)
{
  error = _n.unmarshalWString(0);

}

::CORBA::Exception::insertExceptionToAny Quentin::BadIdent::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::BadIdent::insertToAnyFnNCP = 0;

Quentin::BadIdent::BadIdent(const Quentin::BadIdent& _s) : ::CORBA::UserException(_s)
{
  reason = _s.reason;
  ident = _s.ident;

}

Quentin::BadIdent::BadIdent(BadIdentReason _reason, ::CORBA::Long _ident)
{
  pd_insertToAnyFn    = Quentin::BadIdent::insertToAnyFn;
  pd_insertToAnyFnNCP = Quentin::BadIdent::insertToAnyFnNCP;
  reason = _reason;
  ident = _ident;

}



Quentin::BadIdent& Quentin::BadIdent::operator=(const Quentin::BadIdent& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  reason = _s.reason;
  ident = _s.ident;

  return *this;
}

Quentin::BadIdent::~BadIdent() {}

void Quentin::BadIdent::_raise() const { throw *this; }

const char* Quentin::BadIdent::_PD_repoId = "IDL:Quentin/BadIdent:1.0";
const char* Quentin::BadIdent::_PD_typeId = "Exception/UserException/Quentin::BadIdent";

Quentin::BadIdent* Quentin::BadIdent::_downcast(::CORBA::Exception* _e) {
  return (BadIdent*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::BadIdent* Quentin::BadIdent::_downcast(const ::CORBA::Exception* _e) {
  return (const BadIdent*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::BadIdent::_NP_duplicate() const {
  return new BadIdent(*this);
}

const char* Quentin::BadIdent::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::BadIdent::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/BadIdent:1.0");
  return _PD_repoId;
}

void Quentin::BadIdent::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
Quentin::BadIdent::operator>>= (cdrStream& _n) const
{
  reason >>= _n;
  ident >>= _n;

}

void
Quentin::BadIdent::operator<<= (cdrStream& _n)
{
  (BadIdentReason&)reason <<= _n;
  (::CORBA::Long&)ident <<= _n;

}

::CORBA::Exception::insertExceptionToAny Quentin::BadColumnData::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::BadColumnData::insertToAnyFnNCP = 0;

Quentin::BadColumnData::BadColumnData(const Quentin::BadColumnData& _s) : ::CORBA::UserException(_s)
{
  colName = _s.colName;
  badData = _s.badData;

}

Quentin::BadColumnData::BadColumnData(const ::CORBA::WChar* _colName, const ::CORBA::WChar* _badData)
{
  pd_insertToAnyFn    = Quentin::BadColumnData::insertToAnyFn;
  pd_insertToAnyFnNCP = Quentin::BadColumnData::insertToAnyFnNCP;
  colName = _colName;
  badData = _badData;

}



Quentin::BadColumnData& Quentin::BadColumnData::operator=(const Quentin::BadColumnData& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  colName = _s.colName;
  badData = _s.badData;

  return *this;
}

Quentin::BadColumnData::~BadColumnData() {}

void Quentin::BadColumnData::_raise() const { throw *this; }

const char* Quentin::BadColumnData::_PD_repoId = "IDL:Quentin/BadColumnData:1.0";
const char* Quentin::BadColumnData::_PD_typeId = "Exception/UserException/Quentin::BadColumnData";

Quentin::BadColumnData* Quentin::BadColumnData::_downcast(::CORBA::Exception* _e) {
  return (BadColumnData*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::BadColumnData* Quentin::BadColumnData::_downcast(const ::CORBA::Exception* _e) {
  return (const BadColumnData*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::BadColumnData::_NP_duplicate() const {
  return new BadColumnData(*this);
}

const char* Quentin::BadColumnData::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::BadColumnData::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/BadColumnData:1.0");
  return _PD_repoId;
}

void Quentin::BadColumnData::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
Quentin::BadColumnData::operator>>= (cdrStream& _n) const
{
  _n.marshalWString(colName,0);
  _n.marshalWString(badData,0);

}

void
Quentin::BadColumnData::operator<<= (cdrStream& _n)
{
  colName = _n.unmarshalWString(0);
  badData = _n.unmarshalWString(0);

}

::CORBA::Exception::insertExceptionToAny Quentin::NoSpace::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::NoSpace::insertToAnyFnNCP = 0;

Quentin::NoSpace::NoSpace(const Quentin::NoSpace& _s) : ::CORBA::UserException(_s)
{

}



Quentin::NoSpace& Quentin::NoSpace::operator=(const Quentin::NoSpace& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);

  return *this;
}

Quentin::NoSpace::~NoSpace() {}

void Quentin::NoSpace::_raise() const { throw *this; }

const char* Quentin::NoSpace::_PD_repoId = "IDL:Quentin/NoSpace:1.0";
const char* Quentin::NoSpace::_PD_typeId = "Exception/UserException/Quentin::NoSpace";

Quentin::NoSpace* Quentin::NoSpace::_downcast(::CORBA::Exception* _e) {
  return (NoSpace*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::NoSpace* Quentin::NoSpace::_downcast(const ::CORBA::Exception* _e) {
  return (const NoSpace*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::NoSpace::_NP_duplicate() const {
  return new NoSpace(*this);
}

const char* Quentin::NoSpace::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::NoSpace::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/NoSpace:1.0");
  return _PD_repoId;
}

void Quentin::NoSpace::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny Quentin::WrongMode::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::WrongMode::insertToAnyFnNCP = 0;

Quentin::WrongMode::WrongMode(const Quentin::WrongMode& _s) : ::CORBA::UserException(_s)
{

}



Quentin::WrongMode& Quentin::WrongMode::operator=(const Quentin::WrongMode& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);

  return *this;
}

Quentin::WrongMode::~WrongMode() {}

void Quentin::WrongMode::_raise() const { throw *this; }

const char* Quentin::WrongMode::_PD_repoId = "IDL:Quentin/WrongMode:1.0";
const char* Quentin::WrongMode::_PD_typeId = "Exception/UserException/Quentin::WrongMode";

Quentin::WrongMode* Quentin::WrongMode::_downcast(::CORBA::Exception* _e) {
  return (WrongMode*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::WrongMode* Quentin::WrongMode::_downcast(const ::CORBA::Exception* _e) {
  return (const WrongMode*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::WrongMode::_NP_duplicate() const {
  return new WrongMode(*this);
}

const char* Quentin::WrongMode::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::WrongMode::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/WrongMode:1.0");
  return _PD_repoId;
}

void Quentin::WrongMode::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny Quentin::ZoneInaccessable::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quentin::ZoneInaccessable::insertToAnyFnNCP = 0;

Quentin::ZoneInaccessable::ZoneInaccessable(const Quentin::ZoneInaccessable& _s) : ::CORBA::UserException(_s)
{

}



Quentin::ZoneInaccessable& Quentin::ZoneInaccessable::operator=(const Quentin::ZoneInaccessable& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);

  return *this;
}

Quentin::ZoneInaccessable::~ZoneInaccessable() {}

void Quentin::ZoneInaccessable::_raise() const { throw *this; }

const char* Quentin::ZoneInaccessable::_PD_repoId = "IDL:Quentin/ZoneInaccessable:1.0";
const char* Quentin::ZoneInaccessable::_PD_typeId = "Exception/UserException/Quentin::ZoneInaccessable";

Quentin::ZoneInaccessable* Quentin::ZoneInaccessable::_downcast(::CORBA::Exception* _e) {
  return (ZoneInaccessable*) _NP_is_a(_e, _PD_typeId);
}

const Quentin::ZoneInaccessable* Quentin::ZoneInaccessable::_downcast(const ::CORBA::Exception* _e) {
  return (const ZoneInaccessable*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quentin::ZoneInaccessable::_NP_duplicate() const {
  return new ZoneInaccessable(*this);
}

const char* Quentin::ZoneInaccessable::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quentin::ZoneInaccessable::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quentin/ZoneInaccessable:1.0");
  return _PD_repoId;
}

void Quentin::ZoneInaccessable::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

Quentin::ThumbnailListener_ptr Quentin::ThumbnailListener_Helper::_nil() {
  return ::Quentin::ThumbnailListener::_nil();
}

::CORBA::Boolean Quentin::ThumbnailListener_Helper::is_nil(::Quentin::ThumbnailListener_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::ThumbnailListener_Helper::release(::Quentin::ThumbnailListener_ptr p) {
  ::CORBA::release(p);
}

void Quentin::ThumbnailListener_Helper::marshalObjRef(::Quentin::ThumbnailListener_ptr obj, cdrStream& s) {
  ::Quentin::ThumbnailListener::_marshalObjRef(obj, s);
}

Quentin::ThumbnailListener_ptr Quentin::ThumbnailListener_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::ThumbnailListener::_unmarshalObjRef(s);
}

void Quentin::ThumbnailListener_Helper::duplicate(::Quentin::ThumbnailListener_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::ThumbnailListener_ptr
Quentin::ThumbnailListener::_duplicate(::Quentin::ThumbnailListener_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::ThumbnailListener_ptr
Quentin::ThumbnailListener::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::ThumbnailListener_ptr
Quentin::ThumbnailListener::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::ThumbnailListener_ptr
Quentin::ThumbnailListener::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ThumbnailListener _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ThumbnailListener* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ThumbnailListener;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::ThumbnailListener::_PD_repoId = "IDL:Quentin/ThumbnailListener:1.0";


Quentin::_objref_ThumbnailListener::~_objref_ThumbnailListener() {

}


Quentin::_objref_ThumbnailListener::_objref_ThumbnailListener(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::ThumbnailListener::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
Quentin::_objref_ThumbnailListener::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::ThumbnailListener::_PD_repoId )
    return (::Quentin::ThumbnailListener_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::ThumbnailListener::_PD_repoId) )
    return (::Quentin::ThumbnailListener_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_clong_i_clong_i_cQuentin_mLongs
class _0RL_cd_33742A71C73D0017_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_e0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  Quentin::Longs_var arg_4_;
  const Quentin::Longs* arg_4;
};

void _0RL_cd_33742A71C73D0017_e0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  (const Quentin::Longs&) *arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_e0000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  arg_4_ = new Quentin::Longs;
  (Quentin::Longs&)arg_4_ <<= _n;
  arg_4 = &arg_4_.in();

}

const char* const _0RL_cd_33742A71C73D0017_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e0000000* tcd = (_0RL_cd_33742A71C73D0017_e0000000*)cd;
  Quentin::_impl_ThumbnailListener* impl = (Quentin::_impl_ThumbnailListener*) svnt->_ptrToInterface(Quentin::ThumbnailListener::_PD_repoId);
  impl->newThumbnail(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);


}

void Quentin::_objref_ThumbnailListener::newThumbnail(::CORBA::Long ident, ::CORBA::Long offset, ::CORBA::Long width, ::CORBA::Long height, const ::Quentin::Longs& data)
{
  _0RL_cd_33742A71C73D0017_e0000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f0000000, "newThumbnail", 13);
  _call_desc.arg_0 = ident;
  _call_desc.arg_1 = offset;
  _call_desc.arg_2 = width;
  _call_desc.arg_3 = height;
  _call_desc.arg_4 = &(::Quentin::Longs&) data;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mThumbnailListener_mNoThumbnailReason_i_clong_i_clong_i_cboolean_i_cwstring
class _0RL_cd_33742A71C73D0017_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_01000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::ThumbnailListener::NoThumbnailReason arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Boolean arg_3;
  ::CORBA::WString_var arg_4_;
  const ::CORBA::WChar* arg_4;
};

void _0RL_cd_33742A71C73D0017_01000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  _n.marshalBoolean(arg_3);
  _n.marshalWString(arg_4,0);

}

void _0RL_cd_33742A71C73D0017_01000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::ThumbnailListener::NoThumbnailReason&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  arg_3 = _n.unmarshalBoolean();
  arg_4_ = _n.unmarshalWString(0);
  arg_4 = arg_4_.in();

}

const char* const _0RL_cd_33742A71C73D0017_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_01000000* tcd = (_0RL_cd_33742A71C73D0017_01000000*)cd;
  Quentin::_impl_ThumbnailListener* impl = (Quentin::_impl_ThumbnailListener*) svnt->_ptrToInterface(Quentin::ThumbnailListener::_PD_repoId);
  impl->noThumbnail(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

void Quentin::_objref_ThumbnailListener::noThumbnail(::Quentin::ThumbnailListener::NoThumbnailReason reason, ::CORBA::Long ident, ::CORBA::Long offset, ::CORBA::Boolean tryAgainLater, const ::CORBA::WChar* reasonStr)
{
  _0RL_cd_33742A71C73D0017_01000000 _call_desc(_0RL_lcfn_33742A71C73D0017_11000000, "noThumbnail", 12);
  _call_desc.arg_0 = reason;
  _call_desc.arg_1 = ident;
  _call_desc.arg_2 = offset;
  _call_desc.arg_3 = tryAgainLater;
  _call_desc.arg_4 = reasonStr;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong
class _0RL_cd_33742A71C73D0017_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
};

void _0RL_cd_33742A71C73D0017_21000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_21000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_21000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_ThumbnailListener* impl = (Quentin::_impl_ThumbnailListener*) svnt->_ptrToInterface(Quentin::ThumbnailListener::_PD_repoId);
  impl->finished(tcd->arg_0);


}

void Quentin::_objref_ThumbnailListener::finished(::CORBA::Long ident)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_31000000, "finished", 9);
  _call_desc.arg_0 = ident;

  _invoke(_call_desc);



}
Quentin::_pof_ThumbnailListener::~_pof_ThumbnailListener() {}


omniObjRef*
Quentin::_pof_ThumbnailListener::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_ThumbnailListener(ior, id);
}


::CORBA::Boolean
Quentin::_pof_ThumbnailListener::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::ThumbnailListener::_PD_repoId) )
    return 1;

  return 0;
}

const Quentin::_pof_ThumbnailListener _the_pof_Quentin_mThumbnailListener;

Quentin::_impl_ThumbnailListener::~_impl_ThumbnailListener() {}


::CORBA::Boolean
Quentin::_impl_ThumbnailListener::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "newThumbnail") ) {

    _0RL_cd_33742A71C73D0017_e0000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f0000000, "newThumbnail", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "noThumbnail") ) {

    _0RL_cd_33742A71C73D0017_01000000 _call_desc(_0RL_lcfn_33742A71C73D0017_11000000, "noThumbnail", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "finished") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_31000000, "finished", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Quentin::_impl_ThumbnailListener::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::ThumbnailListener::_PD_repoId )
    return (::Quentin::_impl_ThumbnailListener*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::ThumbnailListener::_PD_repoId) )
    return (::Quentin::_impl_ThumbnailListener*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_ThumbnailListener::_mostDerivedRepoId()
{
  return ::Quentin::ThumbnailListener::_PD_repoId;
}

const ::CORBA::Long Quentin::PortListener::listenerPresent _init_in_cldef_( = 32768 );

void
Quentin::PortListener::PlayPortStatus::operator>>= (cdrStream &_n) const
{
  portNumber >>= _n;
  flags >>= _n;
  refTime >>= _n;
  portTime >>= _n;
  framesUnused >>= _n;
  offset >>= _n;
  endOfData >>= _n;
  speed >>= _n;
  outputTime >>= _n;

}

void
Quentin::PortListener::PlayPortStatus::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)portNumber <<= _n;
  (::CORBA::ULong&)flags <<= _n;
  (Timecode&)refTime <<= _n;
  (Timecode&)portTime <<= _n;
  (::CORBA::Long&)framesUnused <<= _n;
  (::CORBA::Long&)offset <<= _n;
  (::CORBA::Long&)endOfData <<= _n;
  (::CORBA::Float&)speed <<= _n;
  (Timecode&)outputTime <<= _n;

}

const ::CORBA::Long Quentin::PortListener::readyToPlay _init_in_cldef_( = 1 );

const ::CORBA::Long Quentin::PortListener::playing _init_in_cldef_( = 2 );

const ::CORBA::Long Quentin::PortListener::jumpReady _init_in_cldef_( = 4 );

const ::CORBA::Long Quentin::PortListener::fading _init_in_cldef_( = 8 );

const ::CORBA::Long Quentin::PortListener::opAudioFlagsMask _init_in_cldef_( = 3840 );

const ::CORBA::Long Quentin::PortListener::opAudioGrp1 _init_in_cldef_( = 256 );

const ::CORBA::Long Quentin::PortListener::opAudioGrp2 _init_in_cldef_( = 512 );

const ::CORBA::Long Quentin::PortListener::opStdFlagsMask _init_in_cldef_( = 15728640 );

const ::CORBA::Long Quentin::PortListener::opStdSD _init_in_cldef_( = 0 );

const ::CORBA::Long Quentin::PortListener::opStdSD4_3 _init_in_cldef_( = 1048576 );

const ::CORBA::Long Quentin::PortListener::opStdSD16_9 _init_in_cldef_( = 2097152 );

const ::CORBA::Long Quentin::PortListener::opStdHD720p _init_in_cldef_( = 3145728 );

const ::CORBA::Long Quentin::PortListener::opStdHD1080i _init_in_cldef_( = 4194304 );

const ::CORBA::Long Quentin::PortListener::opStdHD1080p _init_in_cldef_( = 5242880 );

const ::CORBA::Long Quentin::PortListener::fieldMode _init_in_cldef_( = 65536 );

const ::CORBA::Long Quentin::PortListener::fieldAuto _init_in_cldef_( = 131072 );

const ::CORBA::Long Quentin::PortListener::fieldNonDom _init_in_cldef_( = 262144 );

void
Quentin::PortListener::RecordPortStatus::operator>>= (cdrStream &_n) const
{
  portNumber >>= _n;
  flags >>= _n;
  refTime >>= _n;
  portTime >>= _n;
  offset >>= _n;
  framesUnused >>= _n;
  start >>= _n;
  finish >>= _n;
  recordableFrames >>= _n;

}

void
Quentin::PortListener::RecordPortStatus::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)portNumber <<= _n;
  (::CORBA::ULong&)flags <<= _n;
  (Timecode&)refTime <<= _n;
  (Timecode&)portTime <<= _n;
  (::CORBA::Long&)offset <<= _n;
  (::CORBA::Long&)framesUnused <<= _n;
  (::CORBA::Long&)start <<= _n;
  (::CORBA::Long&)finish <<= _n;
  (::CORBA::Long&)recordableFrames <<= _n;

}

const ::CORBA::Long Quentin::PortListener::readyToRecord _init_in_cldef_( = 1 );

const ::CORBA::Long Quentin::PortListener::recording _init_in_cldef_( = 2 );

const ::CORBA::Long Quentin::PortListener::overWriting _init_in_cldef_( = 8 );

const ::CORBA::Long Quentin::PortListener::inputInvalid _init_in_cldef_( = 16 );

const ::CORBA::Long Quentin::PortListener::nonStop _init_in_cldef_( = 65536 );

const ::CORBA::Long Quentin::PortListener::ipAudioFlagsMask _init_in_cldef_( = 3840 );

const ::CORBA::Long Quentin::PortListener::ipAudioGrp1 _init_in_cldef_( = 256 );

const ::CORBA::Long Quentin::PortListener::ipAudioGrp2 _init_in_cldef_( = 512 );

const ::CORBA::Long Quentin::PortListener::ipStdMask _init_in_cldef_( = 15728640 );

const ::CORBA::Long Quentin::PortListener::ipStdSD _init_in_cldef_( = 0 );

const ::CORBA::Long Quentin::PortListener::ipStdSD4_3 _init_in_cldef_( = 1048576 );

const ::CORBA::Long Quentin::PortListener::ipStdSD16_9 _init_in_cldef_( = 2097152 );

const ::CORBA::Long Quentin::PortListener::ipStdHD720p _init_in_cldef_( = 3145728 );

const ::CORBA::Long Quentin::PortListener::ipStdHD1080i _init_in_cldef_( = 4194304 );

const ::CORBA::Long Quentin::PortListener::ipStdHD1080p _init_in_cldef_( = 5242880 );

void
Quentin::PortListener::IdlePortStatus::operator>>= (cdrStream &_n) const
{
  portNumber >>= _n;
  flags >>= _n;
  refTime >>= _n;
  portTime >>= _n;
  framesUnused >>= _n;

}

void
Quentin::PortListener::IdlePortStatus::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)portNumber <<= _n;
  (::CORBA::ULong&)flags <<= _n;
  (Timecode&)refTime <<= _n;
  (Timecode&)portTime <<= _n;
  (::CORBA::Long&)framesUnused <<= _n;

}

const ::CORBA::Long Quentin::PortListener::idleAudioFlagsMask _init_in_cldef_( = 3840 );

const ::CORBA::Long Quentin::PortListener::idleAudioGrp1 _init_in_cldef_( = 256 );

const ::CORBA::Long Quentin::PortListener::idleAudioGrp2 _init_in_cldef_( = 512 );

const ::CORBA::Long Quentin::PortListener::idleStdMask _init_in_cldef_( = 15728640 );

const ::CORBA::Long Quentin::PortListener::idleStdSD _init_in_cldef_( = 0 );

const ::CORBA::Long Quentin::PortListener::idleStdSD4_3 _init_in_cldef_( = 1048576 );

const ::CORBA::Long Quentin::PortListener::idleStdSD16_9 _init_in_cldef_( = 2097152 );

const ::CORBA::Long Quentin::PortListener::idleStdHD720p _init_in_cldef_( = 3145728 );

const ::CORBA::Long Quentin::PortListener::idleStdHD1080i _init_in_cldef_( = 4194304 );

const ::CORBA::Long Quentin::PortListener::idleStdHD1080p _init_in_cldef_( = 5242880 );

void
Quentin::PortListener::NoteEvent::operator>>= (cdrStream &_n) const
{
  portNumber >>= _n;
  trackNum >>= _n;
  offset >>= _n;
  noteTime >>= _n;
  eventID >>= _n;
  aux >>= _n;
  _n.marshalWString(note,0);

}

void
Quentin::PortListener::NoteEvent::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)portNumber <<= _n;
  (::CORBA::Long&)trackNum <<= _n;
  (::CORBA::Long&)offset <<= _n;
  (::CORBA::Long&)noteTime <<= _n;
  (::CORBA::Long&)eventID <<= _n;
  (::CORBA::Long&)aux <<= _n;
  note = _n.unmarshalWString(0);

}

Quentin::PortListener_ptr Quentin::PortListener_Helper::_nil() {
  return ::Quentin::PortListener::_nil();
}

::CORBA::Boolean Quentin::PortListener_Helper::is_nil(::Quentin::PortListener_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::PortListener_Helper::release(::Quentin::PortListener_ptr p) {
  ::CORBA::release(p);
}

void Quentin::PortListener_Helper::marshalObjRef(::Quentin::PortListener_ptr obj, cdrStream& s) {
  ::Quentin::PortListener::_marshalObjRef(obj, s);
}

Quentin::PortListener_ptr Quentin::PortListener_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::PortListener::_unmarshalObjRef(s);
}

void Quentin::PortListener_Helper::duplicate(::Quentin::PortListener_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::PortListener_ptr
Quentin::PortListener::_duplicate(::Quentin::PortListener_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::PortListener_ptr
Quentin::PortListener::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::PortListener_ptr
Quentin::PortListener::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::PortListener_ptr
Quentin::PortListener::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PortListener _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PortListener* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_PortListener;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::PortListener::_PD_repoId = "IDL:Quentin/PortListener:1.0";


Quentin::_objref_PortListener::~_objref_PortListener() {

}


Quentin::_objref_PortListener::_objref_PortListener(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::PortListener::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
Quentin::_objref_PortListener::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::PortListener::_PD_repoId )
    return (::Quentin::PortListener_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::PortListener::_PD_repoId) )
    return (::Quentin::PortListener_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPortListener_mPlayPortStatus
class _0RL_cd_33742A71C73D0017_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::PortListener::PlayPortStatus arg_0_;
  const Quentin::PortListener::PlayPortStatus* arg_0;
};

void _0RL_cd_33742A71C73D0017_41000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::PortListener::PlayPortStatus&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_41000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::PortListener::PlayPortStatus&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

const char* const _0RL_cd_33742A71C73D0017_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_41000000* tcd = (_0RL_cd_33742A71C73D0017_41000000*)cd;
  Quentin::_impl_PortListener* impl = (Quentin::_impl_PortListener*) svnt->_ptrToInterface(Quentin::PortListener::_PD_repoId);
  impl->newPlayStatus(*tcd->arg_0);


}

void Quentin::_objref_PortListener::newPlayStatus(const ::Quentin::PortListener::PlayPortStatus& status)
{
  _0RL_cd_33742A71C73D0017_41000000 _call_desc(_0RL_lcfn_33742A71C73D0017_51000000, "newPlayStatus", 14);
  _call_desc.arg_0 = &(::Quentin::PortListener::PlayPortStatus&) status;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPortListener_mRecordPortStatus
class _0RL_cd_33742A71C73D0017_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::PortListener::RecordPortStatus arg_0_;
  const Quentin::PortListener::RecordPortStatus* arg_0;
};

void _0RL_cd_33742A71C73D0017_61000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::PortListener::RecordPortStatus&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_61000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::PortListener::RecordPortStatus&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

const char* const _0RL_cd_33742A71C73D0017_61000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_61000000* tcd = (_0RL_cd_33742A71C73D0017_61000000*)cd;
  Quentin::_impl_PortListener* impl = (Quentin::_impl_PortListener*) svnt->_ptrToInterface(Quentin::PortListener::_PD_repoId);
  impl->newRecordStatus(*tcd->arg_0);


}

void Quentin::_objref_PortListener::newRecordStatus(const ::Quentin::PortListener::RecordPortStatus& status)
{
  _0RL_cd_33742A71C73D0017_61000000 _call_desc(_0RL_lcfn_33742A71C73D0017_71000000, "newRecordStatus", 16);
  _call_desc.arg_0 = &(::Quentin::PortListener::RecordPortStatus&) status;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPortListener_mIdlePortStatus
class _0RL_cd_33742A71C73D0017_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::PortListener::IdlePortStatus arg_0_;
  const Quentin::PortListener::IdlePortStatus* arg_0;
};

void _0RL_cd_33742A71C73D0017_81000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::PortListener::IdlePortStatus&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_81000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::PortListener::IdlePortStatus&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

const char* const _0RL_cd_33742A71C73D0017_81000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_81000000* tcd = (_0RL_cd_33742A71C73D0017_81000000*)cd;
  Quentin::_impl_PortListener* impl = (Quentin::_impl_PortListener*) svnt->_ptrToInterface(Quentin::PortListener::_PD_repoId);
  impl->newIdleStatus(*tcd->arg_0);


}

void Quentin::_objref_PortListener::newIdleStatus(const ::Quentin::PortListener::IdlePortStatus& status)
{
  _0RL_cd_33742A71C73D0017_81000000 _call_desc(_0RL_lcfn_33742A71C73D0017_91000000, "newIdleStatus", 14);
  _call_desc.arg_0 = &(::Quentin::PortListener::IdlePortStatus&) status;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPortListener_mNoteEvent
class _0RL_cd_33742A71C73D0017_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::PortListener::NoteEvent_var arg_0_;
  const Quentin::PortListener::NoteEvent* arg_0;
};

void _0RL_cd_33742A71C73D0017_a1000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::PortListener::NoteEvent&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_a1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::PortListener::NoteEvent;
  (Quentin::PortListener::NoteEvent&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_a1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a1000000* tcd = (_0RL_cd_33742A71C73D0017_a1000000*)cd;
  Quentin::_impl_PortListener* impl = (Quentin::_impl_PortListener*) svnt->_ptrToInterface(Quentin::PortListener::_PD_repoId);
  impl->reportNote(*tcd->arg_0);


}

void Quentin::_objref_PortListener::reportNote(const ::Quentin::PortListener::NoteEvent& note)
{
  _0RL_cd_33742A71C73D0017_a1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b1000000, "reportNote", 11);
  _call_desc.arg_0 = &(::Quentin::PortListener::NoteEvent&) note;

  _invoke(_call_desc);



}
Quentin::_pof_PortListener::~_pof_PortListener() {}


omniObjRef*
Quentin::_pof_PortListener::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_PortListener(ior, id);
}


::CORBA::Boolean
Quentin::_pof_PortListener::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::PortListener::_PD_repoId) )
    return 1;

  return 0;
}

const Quentin::_pof_PortListener _the_pof_Quentin_mPortListener;

Quentin::_impl_PortListener::~_impl_PortListener() {}


::CORBA::Boolean
Quentin::_impl_PortListener::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "newPlayStatus") ) {

    _0RL_cd_33742A71C73D0017_41000000 _call_desc(_0RL_lcfn_33742A71C73D0017_51000000, "newPlayStatus", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newRecordStatus") ) {

    _0RL_cd_33742A71C73D0017_61000000 _call_desc(_0RL_lcfn_33742A71C73D0017_71000000, "newRecordStatus", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newIdleStatus") ) {

    _0RL_cd_33742A71C73D0017_81000000 _call_desc(_0RL_lcfn_33742A71C73D0017_91000000, "newIdleStatus", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reportNote") ) {

    _0RL_cd_33742A71C73D0017_a1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b1000000, "reportNote", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Quentin::_impl_PortListener::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::PortListener::_PD_repoId )
    return (::Quentin::_impl_PortListener*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::PortListener::_PD_repoId) )
    return (::Quentin::_impl_PortListener*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_PortListener::_mostDerivedRepoId()
{
  return ::Quentin::PortListener::_PD_repoId;
}

const ::CORBA::Long Quentin::StateChangeListener::clipChanges _init_in_cldef_( = 1 );

const ::CORBA::Long Quentin::StateChangeListener::serverChanges _init_in_cldef_( = 2 );

const ::CORBA::Long Quentin::StateChangeListener::poolChanges _init_in_cldef_( = 4 );

const ::CORBA::Long Quentin::StateChangeListener::listenerChanges _init_in_cldef_( = 8 );

const ::CORBA::Long Quentin::StateChangeListener::copyCompletions _init_in_cldef_( = 16 );

const ::CORBA::Long Quentin::StateChangeListener::zoneChanges _init_in_cldef_( = 32 );

Quentin::StateChangeListener_ptr Quentin::StateChangeListener_Helper::_nil() {
  return ::Quentin::StateChangeListener::_nil();
}

::CORBA::Boolean Quentin::StateChangeListener_Helper::is_nil(::Quentin::StateChangeListener_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::StateChangeListener_Helper::release(::Quentin::StateChangeListener_ptr p) {
  ::CORBA::release(p);
}

void Quentin::StateChangeListener_Helper::marshalObjRef(::Quentin::StateChangeListener_ptr obj, cdrStream& s) {
  ::Quentin::StateChangeListener::_marshalObjRef(obj, s);
}

Quentin::StateChangeListener_ptr Quentin::StateChangeListener_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::StateChangeListener::_unmarshalObjRef(s);
}

void Quentin::StateChangeListener_Helper::duplicate(::Quentin::StateChangeListener_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::StateChangeListener_ptr
Quentin::StateChangeListener::_duplicate(::Quentin::StateChangeListener_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::StateChangeListener_ptr
Quentin::StateChangeListener::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::StateChangeListener_ptr
Quentin::StateChangeListener::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::StateChangeListener_ptr
Quentin::StateChangeListener::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_StateChangeListener _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_StateChangeListener* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_StateChangeListener;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::StateChangeListener::_PD_repoId = "IDL:Quentin/StateChangeListener:1.0";


Quentin::_objref_StateChangeListener::~_objref_StateChangeListener() {

}


Quentin::_objref_StateChangeListener::_objref_StateChangeListener(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::StateChangeListener::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
Quentin::_objref_StateChangeListener::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::StateChangeListener::_PD_repoId )
    return (::Quentin::StateChangeListener_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::StateChangeListener::_PD_repoId) )
    return (::Quentin::StateChangeListener_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mStateChangeList
class _0RL_cd_33742A71C73D0017_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::StateChangeList_var arg_0_;
  const Quentin::StateChangeList* arg_0;
};

void _0RL_cd_33742A71C73D0017_c1000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::StateChangeList&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::StateChangeList;
  (Quentin::StateChangeList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_c1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_c1000000* tcd = (_0RL_cd_33742A71C73D0017_c1000000*)cd;
  Quentin::_impl_StateChangeListener* impl = (Quentin::_impl_StateChangeListener*) svnt->_ptrToInterface(Quentin::StateChangeListener::_PD_repoId);
  impl->newChanges(*tcd->arg_0);


}

void Quentin::_objref_StateChangeListener::newChanges(const ::Quentin::StateChangeList& list)
{
  _0RL_cd_33742A71C73D0017_c1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d1000000, "newChanges", 11);
  _call_desc.arg_0 = &(::Quentin::StateChangeList&) list;

  _invoke(_call_desc);



}
Quentin::_pof_StateChangeListener::~_pof_StateChangeListener() {}


omniObjRef*
Quentin::_pof_StateChangeListener::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_StateChangeListener(ior, id);
}


::CORBA::Boolean
Quentin::_pof_StateChangeListener::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::StateChangeListener::_PD_repoId) )
    return 1;

  return 0;
}

const Quentin::_pof_StateChangeListener _the_pof_Quentin_mStateChangeListener;

Quentin::_impl_StateChangeListener::~_impl_StateChangeListener() {}


::CORBA::Boolean
Quentin::_impl_StateChangeListener::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "newChanges") ) {

    _0RL_cd_33742A71C73D0017_c1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d1000000, "newChanges", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Quentin::_impl_StateChangeListener::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::StateChangeListener::_PD_repoId )
    return (::Quentin::_impl_StateChangeListener*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::StateChangeListener::_PD_repoId) )
    return (::Quentin::_impl_StateChangeListener*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_StateChangeListener::_mostDerivedRepoId()
{
  return ::Quentin::StateChangeListener::_PD_repoId;
}

const ::CORBA::Long Quentin::Port::LowPriority _init_in_cldef_( = 0 );

const ::CORBA::Long Quentin::Port::StandardPriority _init_in_cldef_( = 8 );

const ::CORBA::Long Quentin::Port::HighPriority _init_in_cldef_( = 15 );

const ::CORBA::Long Quentin::Port::invalidTimecode _init_in_cldef_( = -1 );

const ::CORBA::Long Quentin::Port::dropFrameFlag _init_in_cldef_( = 1073741824 );

const ::CORBA::Long Quentin::Port::crashFlag _init_in_cldef_( = 128 );

const ::CORBA::Long Quentin::Port::numTriggers _init_in_cldef_( = 32 );

void
Quentin::Port::GeneralPortStatus::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case idle:
      (const PortListener::IdlePortStatus&) _pd_idleStatus >>= _n;
      break;
    case recording:
      (const PortListener::RecordPortStatus&) _pd_recStatus >>= _n;
      break;
    case playing:
      (const PortListener::PlayPortStatus&) _pd_playStatus >>= _n;
      break;
    default: break;


  }


}

void
Quentin::Port::GeneralPortStatus::operator<<= (cdrStream& _n)
{
  (PortMode&)_pd__d <<= _n;

  switch(_pd__d) {
    case idle:
      _pd__default = 0;
      (PortListener::IdlePortStatus&)_pd_idleStatus <<= _n;
      break;
    case recording:
      _pd__default = 0;
      (PortListener::RecordPortStatus&)_pd_recStatus <<= _n;
      break;
    case playing:
      _pd__default = 0;
      (PortListener::PlayPortStatus&)_pd_playStatus <<= _n;
      break;

  }
  _pd__initialised = 1;
}

void
Quentin::Port::TriggerState::operator>>= (cdrStream &_n) const
{
  action >>= _n;
  mode >>= _n;
  param >>= _n;

}

void
Quentin::Port::TriggerState::operator<<= (cdrStream &_n)
{
  (TriggerAction&)action <<= _n;
  (TriggerMode&)mode <<= _n;
  (::CORBA::Long&)param <<= _n;

}

const ::CORBA::ULong Quentin::Port::userFlagsMask _init_in_cldef_( = 2147418112U );

const ::CORBA::Long Quentin::Port::alertRed _init_in_cldef_( = 32768 );

const ::CORBA::Long Quentin::Port::alertAmber _init_in_cldef_( = 16384 );

const ::CORBA::Long Quentin::Port::audioOnly _init_in_cldef_( = 1 );

const ::CORBA::WChar * Quentin::Port::OI_Tally = L"ActiveTally";

Quentin::Port_ptr Quentin::Port_Helper::_nil() {
  return ::Quentin::Port::_nil();
}

::CORBA::Boolean Quentin::Port_Helper::is_nil(::Quentin::Port_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::Port_Helper::release(::Quentin::Port_ptr p) {
  ::CORBA::release(p);
}

void Quentin::Port_Helper::marshalObjRef(::Quentin::Port_ptr obj, cdrStream& s) {
  ::Quentin::Port::_marshalObjRef(obj, s);
}

Quentin::Port_ptr Quentin::Port_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::Port::_unmarshalObjRef(s);
}

void Quentin::Port_Helper::duplicate(::Quentin::Port_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::Port_ptr
Quentin::Port::_duplicate(::Quentin::Port_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::Port_ptr
Quentin::Port::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::Port_ptr
Quentin::Port::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::Port_ptr
Quentin::Port::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Port _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Port* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Port;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::Port::_PD_repoId = "IDL:Quentin/Port:1.0";


Quentin::_objref_Port::~_objref_Port() {

}


Quentin::_objref_Port::_objref_Port(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::Port::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(Quentin::)_objref_Properties(ior, id)

{
  _PR_setobj(this);
}

void*
Quentin::_objref_Port::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::Port::_PD_repoId )
    return (::Quentin::Port_ptr) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::Properties_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::Port::_PD_repoId) )
    return (::Quentin::Port_ptr) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::Properties_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
};

void _0RL_cd_33742A71C73D0017_e1000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_e1000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_e1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e1000000* tcd = (_0RL_cd_33742A71C73D0017_e1000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->changeFlags(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::changeFlags(::CORBA::Long mask, ::CORBA::Long newFlags)
{
  _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f1000000, "changeFlags", 12);
  _call_desc.arg_0 = mask;
  _call_desc.arg_1 = newFlags;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cQuentin_mPort_mPortMode
class _0RL_cd_33742A71C73D0017_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_02000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::Port::PortMode arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_02000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_02000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::Port::PortMode&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_02000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_02000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_02000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_02000000* tcd = (_0RL_cd_33742A71C73D0017_02000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->setMode(tcd->arg_0);


}

::CORBA::Boolean Quentin::_objref_Port::setMode(::Quentin::Port::PortMode newMode)
{
  _0RL_cd_33742A71C73D0017_02000000 _call_desc(_0RL_lcfn_33742A71C73D0017_12000000, "setMode", 8);
  _call_desc.arg_0 = newMode;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_22000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->reset();


}

void Quentin::_objref_Port::reset()
{
  _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_22000000, "reset", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_32000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->resetTriggers();


}

void Quentin::_objref_Port::resetTriggers()
{
  _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_32000000, "resetTriggers", 14);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_42000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->resetTracks();


}

void Quentin::_objref_Port::resetTracks()
{
  _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_42000000, "resetTracks", 12);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e1000000* tcd = (_0RL_cd_33742A71C73D0017_e1000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setTrackLimits(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::setTrackLimits(::CORBA::Long startFrame, ::CORBA::Long endFrame)
{
  _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_52000000, "setTrackLimits", 15);
  _call_desc.arg_0 = startFrame;
  _call_desc.arg_1 = endFrame;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPort_mGeneralPortStatus
class _0RL_cd_33742A71C73D0017_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_62000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::Port::GeneralPortStatus result;
};

void _0RL_cd_33742A71C73D0017_62000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Port::GeneralPortStatus&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_62000000::unmarshalReturnedValues(cdrStream& _n)
{
  (Quentin::Port::GeneralPortStatus&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_62000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_62000000* tcd = (_0RL_cd_33742A71C73D0017_62000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getStatus();


}

Quentin::Port::GeneralPortStatus Quentin::_objref_Port::getStatus()
{
  _0RL_cd_33742A71C73D0017_62000000 _call_desc(_0RL_lcfn_33742A71C73D0017_72000000, "getStatus", 10);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPortListener_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_82000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_82000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::PortListener_var arg_0_;
  Quentin::PortListener_ptr arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
};

void _0RL_cd_33742A71C73D0017_82000000::marshalArguments(cdrStream& _n)
{
  Quentin::PortListener::_marshalObjRef(arg_0,_n);
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_82000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Quentin::PortListener::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_82000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_92000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_82000000* tcd = (_0RL_cd_33742A71C73D0017_82000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->reportStatus(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void Quentin::_objref_Port::reportStatus(::Quentin::PortListener_ptr listener, ::CORBA::Long interval, ::CORBA::Long noteMask)
{
  _0RL_cd_33742A71C73D0017_82000000 _call_desc(_0RL_lcfn_33742A71C73D0017_92000000, "reportStatus", 13);
  _call_desc.arg_0 = listener;
  _call_desc.arg_1 = interval;
  _call_desc.arg_2 = noteMask;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_i_cQuentin_mPort_mTriggerMode_i_clong
class _0RL_cd_33742A71C73D0017_a2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Port::TriggerMode arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_a2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_a2000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (Quentin::Port::TriggerMode&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_a2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_a2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_a2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a2000000* tcd = (_0RL_cd_33742A71C73D0017_a2000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->setTrigger(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean Quentin::_objref_Port::setTrigger(::CORBA::Long trigger, ::Quentin::Port::TriggerMode mode, ::CORBA::Long param)
{
  _0RL_cd_33742A71C73D0017_a2000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b2000000, "setTrigger", 11);
  _call_desc.arg_0 = trigger;
  _call_desc.arg_1 = mode;
  _call_desc.arg_2 = param;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_i_cQuentin_mPort_mTriggerAction
class _0RL_cd_33742A71C73D0017_c2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_c2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Port::TriggerAction arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_c2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_c2000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (Quentin::Port::TriggerAction&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_c2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_c2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_c2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_c2000000* tcd = (_0RL_cd_33742A71C73D0017_c2000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->actionAtTrigger(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean Quentin::_objref_Port::actionAtTrigger(::CORBA::Long trigger, ::Quentin::Port::TriggerAction action)
{
  _0RL_cd_33742A71C73D0017_c2000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d2000000, "actionAtTrigger", 16);
  _call_desc.arg_0 = trigger;
  _call_desc.arg_1 = action;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPort_mTriggerState_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_e2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_e2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Port::TriggerState result;
};

void _0RL_cd_33742A71C73D0017_e2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_e2000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_e2000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Port::TriggerState&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_e2000000::unmarshalReturnedValues(cdrStream& _n)
{
  (Quentin::Port::TriggerState&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_e2000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_e2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e2000000* tcd = (_0RL_cd_33742A71C73D0017_e2000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTrigger(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTrigger(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getTrigger(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Port::TriggerState Quentin::_objref_Port::getTrigger(::CORBA::Long trigger)
{
  _0RL_cd_33742A71C73D0017_e2000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f2000000, "getTrigger", 11);
  _call_desc.arg_0 = trigger;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPort_mTriggerStates
class _0RL_cd_33742A71C73D0017_03000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_03000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::Port::TriggerStates_var result;
};

void _0RL_cd_33742A71C73D0017_03000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Port::TriggerStates&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_03000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Port::TriggerStates;
  (Quentin::Port::TriggerStates&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_03000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_03000000* tcd = (_0RL_cd_33742A71C73D0017_03000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getTriggers();


}

Quentin::Port::TriggerStates* Quentin::_objref_Port::getTriggers()
{
  _0RL_cd_33742A71C73D0017_03000000 _call_desc(_0RL_lcfn_33742A71C73D0017_13000000, "getTriggers", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_23000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_23000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_23000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_23000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_23000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_23000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_23000000* tcd = (_0RL_cd_33742A71C73D0017_23000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getPortFragments(tcd->arg_0, tcd->arg_1);


}

Quentin::ServerFragments* Quentin::_objref_Port::getPortFragments(::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_23000000 _call_desc(_0RL_lcfn_33742A71C73D0017_33000000, "getPortFragments", 17);
  _call_desc.arg_0 = start;
  _call_desc.arg_1 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_43000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_43000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_43000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_43000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_43000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_43000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_43000000* tcd = (_0RL_cd_33742A71C73D0017_43000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getPortTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

Quentin::ServerFragments* Quentin::_objref_Port::getPortTypeFragments(::CORBA::Long start, ::CORBA::Long finish, ::CORBA::Long fragType)
{
  _0RL_cd_33742A71C73D0017_43000000 _call_desc(_0RL_lcfn_33742A71C73D0017_53000000, "getPortTypeFragments", 21);
  _call_desc.arg_0 = start;
  _call_desc.arg_1 = finish;
  _call_desc.arg_2 = fragType;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_63000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_63000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_63000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_63000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_63000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_63000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_63000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_63000000* tcd = (_0RL_cd_33742A71C73D0017_63000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getPortTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

Quentin::ServerFragments* Quentin::_objref_Port::getPortTrackFragments(::CORBA::Long start, ::CORBA::Long finish, ::CORBA::Long fragType, ::CORBA::Long trackNum)
{
  _0RL_cd_33742A71C73D0017_63000000 _call_desc(_0RL_lcfn_33742A71C73D0017_73000000, "getPortTrackFragments", 22);
  _call_desc.arg_0 = start;
  _call_desc.arg_1 = finish;
  _call_desc.arg_2 = fragType;
  _call_desc.arg_3 = trackNum;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_o_clong_o_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_83000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
};

void _0RL_cd_33742A71C73D0017_83000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_83000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_83000000::marshalReturnedValues(cdrStream& _n)
{
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_83000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_83000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_83000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_83000000* tcd = (_0RL_cd_33742A71C73D0017_83000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_Port::getThumbnailSize(::CORBA::Long mode, ::CORBA::Long& width, ::CORBA::Long& height)
{
  _0RL_cd_33742A71C73D0017_83000000 _call_desc(_0RL_lcfn_33742A71C73D0017_93000000, "getThumbnailSize", 17);
  _call_desc.arg_0 = mode;

  _invoke(_call_desc);
  width = _call_desc.arg_1;
  height = _call_desc.arg_2;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_clong_i_cQuentin_mThumbnailListener_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  Quentin::ThumbnailListener_var arg_3_;
  Quentin::ThumbnailListener_ptr arg_3;
  ::CORBA::Long arg_4;
};

void _0RL_cd_33742A71C73D0017_a3000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  Quentin::ThumbnailListener::_marshalObjRef(arg_3,_n);
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_a3000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  arg_3_ = Quentin::ThumbnailListener::_unmarshalObjRef(_n);
  arg_3 = arg_3_.in();
  (::CORBA::Long&)arg_4 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_a3000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_a3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a3000000* tcd = (_0RL_cd_33742A71C73D0017_a3000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setThumbnailListener(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    impl->setThumbnailListener(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      impl->setThumbnailListener(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_Port::setThumbnailListener(::CORBA::Long mode, ::CORBA::Long chanNum, ::CORBA::Long ident, ::Quentin::ThumbnailListener_ptr listener, ::CORBA::Long minInterval)
{
  _0RL_cd_33742A71C73D0017_a3000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b3000000, "setThumbnailListener", 21);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = chanNum;
  _call_desc.arg_2 = ident;
  _call_desc.arg_3 = listener;
  _call_desc.arg_4 = minInterval;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_clong_i_clong_i_clong_i_clong_i_cQuentin_mThumbnailListener_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_c3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  ::CORBA::Long arg_5;
  Quentin::ThumbnailListener_var arg_6_;
  Quentin::ThumbnailListener_ptr arg_6;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_c3000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;
  arg_5 >>= _n;
  Quentin::ThumbnailListener::_marshalObjRef(arg_6,_n);

}

void _0RL_cd_33742A71C73D0017_c3000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;
  (::CORBA::Long&)arg_5 <<= _n;
  arg_6_ = Quentin::ThumbnailListener::_unmarshalObjRef(_n);
  arg_6 = arg_6_.in();

}

void _0RL_cd_33742A71C73D0017_c3000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_c3000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_c3000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_c3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_c3000000* tcd = (_0RL_cd_33742A71C73D0017_c3000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->requestThumbnails(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
#else
  if (!cd->is_upcall())
    tcd->result = impl->requestThumbnails(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
  else {
    try {
      tcd->result = impl->requestThumbnails(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_Port::requestThumbnails(::CORBA::Long mode, ::CORBA::Long chanNum, ::CORBA::Long offset, ::CORBA::Long stride, ::CORBA::Long count, ::CORBA::Long ident, ::Quentin::ThumbnailListener_ptr listener)
{
  _0RL_cd_33742A71C73D0017_c3000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d3000000, "requestThumbnails", 18);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = chanNum;
  _call_desc.arg_2 = offset;
  _call_desc.arg_3 = stride;
  _call_desc.arg_4 = count;
  _call_desc.arg_5 = ident;
  _call_desc.arg_6 = listener;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->abortThumbnails(tcd->arg_0);


}

void Quentin::_objref_Port::abortThumbnails(::CORBA::Long abortID)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e3000000, "abortThumbnails", 16);
  _call_desc.arg_0 = abortID;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_20000000* tcd = (_0RL_cd_33742A71C73D0017_20000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->controllerNames();


}

Quentin::WStrings* Quentin::_objref_Port::controllerNames()
{
  _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f3000000, "controllerNames", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mEffectController_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_04000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_04000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::EffectController_var result;
};

void _0RL_cd_33742A71C73D0017_04000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_04000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_04000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::EffectController::_marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_04000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::EffectController::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_04000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_04000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_04000000* tcd = (_0RL_cd_33742A71C73D0017_04000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getController(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getController(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getController(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::EffectController_ptr Quentin::_objref_Port::getController(::CORBA::Long trackNum)
{
  _0RL_cd_33742A71C73D0017_04000000 _call_desc(_0RL_lcfn_33742A71C73D0017_14000000, "getController", 14);
  _call_desc.arg_0 = trackNum;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPortInfo
class _0RL_cd_33742A71C73D0017_24000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_24000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::PortInfo_var result;
};

void _0RL_cd_33742A71C73D0017_24000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::PortInfo&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_24000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::PortInfo;
  (Quentin::PortInfo&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_24000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_34000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_24000000* tcd = (_0RL_cd_33742A71C73D0017_24000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getPortInfo();


}

Quentin::PortInfo* Quentin::_objref_Port::getPortInfo()
{
  _0RL_cd_33742A71C73D0017_24000000 _call_desc(_0RL_lcfn_33742A71C73D0017_34000000, "getPortInfo", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mDirectoryViewer_i_clong_i_cwstring_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_44000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_44000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::WString_var arg_1_;
  const ::CORBA::WChar* arg_1;
  Quentin::DirectoryViewer_var result;
};

void _0RL_cd_33742A71C73D0017_44000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_33742A71C73D0017_44000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_44000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::DirectoryViewer_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_44000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::DirectoryViewer_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_44000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_44000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_44000000* tcd = (_0RL_cd_33742A71C73D0017_44000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getDirViewer(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getDirViewer(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getDirViewer(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::DirectoryViewer_ptr Quentin::_objref_Port::getDirViewer(::CORBA::Long timeoutSecs, const ::CORBA::WChar* viewerName)
{
  _0RL_cd_33742A71C73D0017_44000000 _call_desc(_0RL_lcfn_33742A71C73D0017_54000000, "getDirViewer", 13);
  _call_desc.arg_0 = timeoutSecs;
  _call_desc.arg_1 = viewerName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mDirectoryViewer_i_clong_i_clong_i_cwstring_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_64000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_64000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::WString_var arg_2_;
  const ::CORBA::WChar* arg_2;
  Quentin::DirectoryViewer_var result;
};

void _0RL_cd_33742A71C73D0017_64000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_33742A71C73D0017_64000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_33742A71C73D0017_64000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::DirectoryViewer_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_64000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::DirectoryViewer_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_64000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_64000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_64000000* tcd = (_0RL_cd_33742A71C73D0017_64000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPoolDirViewer(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPoolDirViewer(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getPoolDirViewer(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::DirectoryViewer_ptr Quentin::_objref_Port::getPoolDirViewer(::CORBA::Long poolID, ::CORBA::Long timeoutSecs, const ::CORBA::WChar* viewerName)
{
  _0RL_cd_33742A71C73D0017_64000000 _call_desc(_0RL_lcfn_33742A71C73D0017_74000000, "getPoolDirViewer", 17);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = timeoutSecs;
  _call_desc.arg_2 = viewerName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mConfigDescriptionList_i_clong_i_cQuentin_mFragmentType_i_cboolean_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_84000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_84000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::FragmentType arg_1;
  ::CORBA::Boolean arg_2;
  Quentin::ConfigDescriptionList_var result;
};

void _0RL_cd_33742A71C73D0017_84000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  _n.marshalBoolean(arg_2);

}

void _0RL_cd_33742A71C73D0017_84000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (Quentin::FragmentType&)arg_1 <<= _n;
  arg_2 = _n.unmarshalBoolean();

}

void _0RL_cd_33742A71C73D0017_84000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ConfigDescriptionList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_84000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ConfigDescriptionList;
  (Quentin::ConfigDescriptionList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_84000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_84000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_84000000* tcd = (_0RL_cd_33742A71C73D0017_84000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getConfigurations(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getConfigurations(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getConfigurations(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ConfigDescriptionList* Quentin::_objref_Port::getConfigurations(::CORBA::Long channel, ::Quentin::FragmentType type, ::CORBA::Boolean forPlay)
{
  _0RL_cd_33742A71C73D0017_84000000 _call_desc(_0RL_lcfn_33742A71C73D0017_94000000, "getConfigurations", 18);
  _call_desc.arg_0 = channel;
  _call_desc.arg_1 = type;
  _call_desc.arg_2 = forPlay;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_a4000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_a4000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_a4000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_a4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_a4000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_a4000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a4000000* tcd = (_0RL_cd_33742A71C73D0017_a4000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getDefaultConfigurations(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getDefaultConfigurations(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getDefaultConfigurations(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_Port::getDefaultConfigurations(::CORBA::Long channel)
{
  _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b4000000, "getDefaultConfigurations", 25);
  _call_desc.arg_0 = channel;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a4000000* tcd = (_0RL_cd_33742A71C73D0017_a4000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getCurrentConfigurations(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getCurrentConfigurations(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getCurrentConfigurations(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_Port::getCurrentConfigurations(::CORBA::Long channel)
{
  _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c4000000, "getCurrentConfigurations", 25);
  _call_desc.arg_0 = channel;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_cQuentin_mLongs_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_d4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
};

void _0RL_cd_33742A71C73D0017_d4000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_d4000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_33742A71C73D0017_d4000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_d4000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d4000000* tcd = (_0RL_cd_33742A71C73D0017_d4000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->configure(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->configure(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->configure(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_Port::configure(::CORBA::Long channel, const ::Quentin::Longs& configurations)
{
  _0RL_cd_33742A71C73D0017_d4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e4000000, "configure", 10);
  _call_desc.arg_0 = channel;
  _call_desc.arg_1 = &(::Quentin::Longs&) configurations;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_f4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_f4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_f4000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_f4000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_f4000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_f4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_f4000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_f4000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_05000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f4000000* tcd = (_0RL_cd_33742A71C73D0017_f4000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->assignChannel(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->assignChannel(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->assignChannel(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_Port::assignChannel(::CORBA::Long chanNum, ::CORBA::Long flags)
{
  _0RL_cd_33742A71C73D0017_f4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_05000000, "assignChannel", 14);
  _call_desc.arg_0 = chanNum;
  _call_desc.arg_1 = flags;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPort_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_15000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_15000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::Port_var arg_0_;
  Quentin::Port_ptr arg_0;
};

void _0RL_cd_33742A71C73D0017_15000000::marshalArguments(cdrStream& _n)
{
  Quentin::Port::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_33742A71C73D0017_15000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Quentin::Port::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_15000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_15000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_25000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_15000000* tcd = (_0RL_cd_33742A71C73D0017_15000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->assignTransitionPort(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->assignTransitionPort(tcd->arg_0);
  else {
    try {
      impl->assignTransitionPort(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_Port::assignTransitionPort(::Quentin::Port_ptr transitionPort)
{
  _0RL_cd_33742A71C73D0017_15000000 _call_desc(_0RL_lcfn_33742A71C73D0017_25000000, "assignTransitionPort", 21);
  _call_desc.arg_0 = transitionPort;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPort
class _0RL_cd_33742A71C73D0017_35000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_35000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::Port_var result;
};

void _0RL_cd_33742A71C73D0017_35000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::Port::_marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_35000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::Port::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_35000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_45000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_35000000* tcd = (_0RL_cd_33742A71C73D0017_35000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getTransitionPort();


}

Quentin::Port_ptr Quentin::_objref_Port::getTransitionPort()
{
  _0RL_cd_33742A71C73D0017_35000000 _call_desc(_0RL_lcfn_33742A71C73D0017_45000000, "getTransitionPort", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs
class _0RL_cd_33742A71C73D0017_55000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_55000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_55000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_55000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_55000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_65000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_55000000* tcd = (_0RL_cd_33742A71C73D0017_55000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->getChannels();


}

Quentin::Longs* Quentin::_objref_Port::getChannels()
{
  _0RL_cd_33742A71C73D0017_55000000 _call_desc(_0RL_lcfn_33742A71C73D0017_65000000, "getChannels", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_75000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->release();


}

void Quentin::_objref_Port::release()
{
  _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_75000000, "release", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_cQuentin_mServerFragments_e_cQuentin_mInvalidFragments_e_cQuentin_mWrongMode
class _0RL_cd_33742A71C73D0017_85000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_85000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
};

void _0RL_cd_33742A71C73D0017_85000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_85000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_33742A71C73D0017_85000000::_user_exns[] = {
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::WrongMode::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_85000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::WrongMode::_PD_repoId) ) {
    Quentin::WrongMode _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_85000000* tcd = (_0RL_cd_33742A71C73D0017_85000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->load(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->load(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->load(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::WrongMode& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_Port::load(::CORBA::Long offset, const ::Quentin::ServerFragments& fragments)
{
  _0RL_cd_33742A71C73D0017_85000000 _call_desc(_0RL_lcfn_33742A71C73D0017_95000000, "load", 5);
  _call_desc.arg_0 = offset;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) fragments;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e1000000* tcd = (_0RL_cd_33742A71C73D0017_e1000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->insertBlank(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::insertBlank(::CORBA::Long start, ::CORBA::Long frames)
{
  _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a5000000, "insertBlank", 12);
  _call_desc.arg_0 = start;
  _call_desc.arg_1 = frames;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_b5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_b5000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_b5000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_b5000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_b5000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_b5000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_b5000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b5000000* tcd = (_0RL_cd_33742A71C73D0017_b5000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->remove(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean Quentin::_objref_Port::remove(::CORBA::Long start, ::CORBA::Long frames)
{
  _0RL_cd_33742A71C73D0017_b5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c5000000, "remove", 7);
  _call_desc.arg_0 = start;
  _call_desc.arg_1 = frames;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b5000000* tcd = (_0RL_cd_33742A71C73D0017_b5000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->wipe(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean Quentin::_objref_Port::wipe(::CORBA::Long start, ::CORBA::Long frames)
{
  _0RL_cd_33742A71C73D0017_b5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d5000000, "wipe", 5);
  _call_desc.arg_0 = start;
  _call_desc.arg_1 = frames;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_cboolean
class _0RL_cd_33742A71C73D0017_e5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_e5000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_33742A71C73D0017_e5000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_33742A71C73D0017_e5000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_e5000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e5000000* tcd = (_0RL_cd_33742A71C73D0017_e5000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->jump(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::jump(::CORBA::Long offset, ::CORBA::Boolean disablePreload)
{
  _0RL_cd_33742A71C73D0017_e5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f5000000, "jump", 5);
  _call_desc.arg_0 = offset;
  _call_desc.arg_1 = disablePreload;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_06000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->jumpRelative(tcd->arg_0);


}

void Quentin::_objref_Port::jumpRelative(::CORBA::Long offset)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_06000000, "jumpRelative", 13);
  _call_desc.arg_0 = offset;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_16000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setJump(tcd->arg_0);


}

void Quentin::_objref_Port::setJump(::CORBA::Long offset)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_16000000, "setJump", 8);
  _call_desc.arg_0 = offset;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPort_mTransitionType_i_clong_i_cboolean
class _0RL_cd_33742A71C73D0017_26000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_26000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::Port::TransitionType arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Boolean arg_2;
};

void _0RL_cd_33742A71C73D0017_26000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  _n.marshalBoolean(arg_2);

}

void _0RL_cd_33742A71C73D0017_26000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::Port::TransitionType&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_26000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_36000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_26000000* tcd = (_0RL_cd_33742A71C73D0017_26000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setTransition(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void Quentin::_objref_Port::setTransition(::Quentin::Port::TransitionType type, ::CORBA::Long frames, ::CORBA::Boolean autoPlay)
{
  _0RL_cd_33742A71C73D0017_26000000 _call_desc(_0RL_lcfn_33742A71C73D0017_36000000, "setTransition", 14);
  _call_desc.arg_0 = type;
  _call_desc.arg_1 = frames;
  _call_desc.arg_2 = autoPlay;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cfloat
class _0RL_cd_33742A71C73D0017_46000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_46000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Float arg_0;
};

void _0RL_cd_33742A71C73D0017_46000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_46000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Float&)arg_0 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_46000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_56000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_46000000* tcd = (_0RL_cd_33742A71C73D0017_46000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setSpeed(tcd->arg_0);


}

void Quentin::_objref_Port::setSpeed(::CORBA::Float newSpeed)
{
  _0RL_cd_33742A71C73D0017_46000000 _call_desc(_0RL_lcfn_33742A71C73D0017_56000000, "setSpeed", 9);
  _call_desc.arg_0 = newSpeed;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong
class _0RL_cd_33742A71C73D0017_66000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_66000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_66000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_66000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_66000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_66000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_66000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_76000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_66000000* tcd = (_0RL_cd_33742A71C73D0017_66000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->jogAudio(tcd->arg_0);


}

::CORBA::Long Quentin::_objref_Port::jogAudio(::CORBA::Long frames)
{
  _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_76000000, "jogAudio", 9);
  _call_desc.arg_0 = frames;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_86000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->jogSubFrames(tcd->arg_0);


}

void Quentin::_objref_Port::jogSubFrames(::CORBA::Long subFrameTicks)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_86000000, "jogSubFrames", 13);
  _call_desc.arg_0 = subFrameTicks;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mAudioPatchInfoList_i_cboolean
class _0RL_cd_33742A71C73D0017_96000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_96000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::AudioPatchInfoList_var arg_0_;
  const Quentin::AudioPatchInfoList* arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_33742A71C73D0017_96000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::AudioPatchInfoList&) *arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_33742A71C73D0017_96000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::AudioPatchInfoList;
  (Quentin::AudioPatchInfoList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_96000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_96000000* tcd = (_0RL_cd_33742A71C73D0017_96000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setInputAudioPatch(*tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::setInputAudioPatch(const ::Quentin::AudioPatchInfoList& patches, ::CORBA::Boolean preview)
{
  _0RL_cd_33742A71C73D0017_96000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a6000000, "setInputAudioPatch", 19);
  _call_desc.arg_0 = &(::Quentin::AudioPatchInfoList&) patches;
  _call_desc.arg_1 = preview;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_cQuentin_mAudioPatchInfoList
class _0RL_cd_33742A71C73D0017_b6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_b6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::AudioPatchInfoList_var arg_2_;
  const Quentin::AudioPatchInfoList* arg_2;
};

void _0RL_cd_33742A71C73D0017_b6000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  (const Quentin::AudioPatchInfoList&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_b6000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = new Quentin::AudioPatchInfoList;
  (Quentin::AudioPatchInfoList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_33742A71C73D0017_b6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b6000000* tcd = (_0RL_cd_33742A71C73D0017_b6000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setOutputAudioPatch(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void Quentin::_objref_Port::setOutputAudioPatch(::CORBA::Long startFrame, ::CORBA::Long endFrame, const ::Quentin::AudioPatchInfoList& patches)
{
  _0RL_cd_33742A71C73D0017_b6000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c6000000, "setOutputAudioPatch", 20);
  _call_desc.arg_0 = startFrame;
  _call_desc.arg_1 = endFrame;
  _call_desc.arg_2 = &(::Quentin::AudioPatchInfoList&) patches;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mWrongMode
class _0RL_cd_33742A71C73D0017_d6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_d6000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_d6000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_d6000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_d6000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_d6000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::WrongMode::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_d6000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::WrongMode::_PD_repoId) ) {
    Quentin::WrongMode _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d6000000* tcd = (_0RL_cd_33742A71C73D0017_d6000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->extendSpace(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->extendSpace(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->extendSpace(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::WrongMode& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_Port::extendSpace(::CORBA::Long poolID, ::CORBA::Long totalFrames)
{
  _0RL_cd_33742A71C73D0017_d6000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e6000000, "extendSpace", 12);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = totalFrames;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_66000000* tcd = (_0RL_cd_33742A71C73D0017_66000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  tcd->result = impl->forget(tcd->arg_0);


}

::CORBA::Long Quentin::_objref_Port::forget(::CORBA::Long offset)
{
  _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f6000000, "forget", 7);
  _call_desc.arg_0 = offset;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_07000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e1000000* tcd = (_0RL_cd_33742A71C73D0017_e1000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setFlags(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::setFlags(::CORBA::Long track, ::CORBA::Long newFlags)
{
  _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_07000000, "setFlags", 9);
  _call_desc.arg_0 = track;
  _call_desc.arg_1 = newFlags;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_clong_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_17000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_17000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
};

void _0RL_cd_33742A71C73D0017_17000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_17000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_17000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_27000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_17000000* tcd = (_0RL_cd_33742A71C73D0017_17000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setCrop(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

void Quentin::_objref_Port::setCrop(::CORBA::Long track, ::CORBA::Long cropLeft, ::CORBA::Long cropTop, ::CORBA::Long cropWidth, ::CORBA::Long cropHeight)
{
  _0RL_cd_33742A71C73D0017_17000000 _call_desc(_0RL_lcfn_33742A71C73D0017_27000000, "setCrop", 8);
  _call_desc.arg_0 = track;
  _call_desc.arg_1 = cropLeft;
  _call_desc.arg_2 = cropTop;
  _call_desc.arg_3 = cropWidth;
  _call_desc.arg_4 = cropHeight;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_37000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_37000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
};

void _0RL_cd_33742A71C73D0017_37000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_37000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_37000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_47000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_37000000* tcd = (_0RL_cd_33742A71C73D0017_37000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setAspect(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void Quentin::_objref_Port::setAspect(::CORBA::Long track, ::CORBA::Long width, ::CORBA::Long height)
{
  _0RL_cd_33742A71C73D0017_37000000 _call_desc(_0RL_lcfn_33742A71C73D0017_47000000, "setAspect", 10);
  _call_desc.arg_0 = track;
  _call_desc.arg_1 = width;
  _call_desc.arg_2 = height;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring
class _0RL_cd_33742A71C73D0017_57000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_57000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
};

void _0RL_cd_33742A71C73D0017_57000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_33742A71C73D0017_57000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_57000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_67000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_57000000* tcd = (_0RL_cd_33742A71C73D0017_57000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setOriginator(tcd->arg_0);


}

void Quentin::_objref_Port::setOriginator(const ::CORBA::WChar* originator)
{
  _0RL_cd_33742A71C73D0017_57000000 _call_desc(_0RL_lcfn_33742A71C73D0017_67000000, "setOriginator", 14);
  _call_desc.arg_0 = originator;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mRushTimecodeList
class _0RL_cd_33742A71C73D0017_77000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_77000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  Quentin::RushTimecodeList_var arg_0_;
  const Quentin::RushTimecodeList* arg_0;
};

void _0RL_cd_33742A71C73D0017_77000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::RushTimecodeList&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_77000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::RushTimecodeList;
  (Quentin::RushTimecodeList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_77000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_87000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_77000000* tcd = (_0RL_cd_33742A71C73D0017_77000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setRecordTimecodes(*tcd->arg_0);


}

void Quentin::_objref_Port::setRecordTimecodes(const ::Quentin::RushTimecodeList& timecodes)
{
  _0RL_cd_33742A71C73D0017_77000000 _call_desc(_0RL_lcfn_33742A71C73D0017_87000000, "setRecordTimecodes", 19);
  _call_desc.arg_0 = &(::Quentin::RushTimecodeList&) timecodes;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mRushIdent_i_cQuentin_mFragmentType_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_97000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_97000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::FragmentType arg_0;
  ::CORBA::Long arg_1;
  Quentin::RushIdent result;
};

void _0RL_cd_33742A71C73D0017_97000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_97000000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::FragmentType&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_97000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::RushIdent&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_97000000::unmarshalReturnedValues(cdrStream& _n)
{
  (Quentin::RushIdent&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_97000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_97000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_97000000* tcd = (_0RL_cd_33742A71C73D0017_97000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getRushRecording(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getRushRecording(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getRushRecording(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::RushIdent Quentin::_objref_Port::getRushRecording(::Quentin::FragmentType type, ::CORBA::Long track)
{
  _0RL_cd_33742A71C73D0017_97000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a7000000, "getRushRecording", 17);
  _call_desc.arg_0 = type;
  _call_desc.arg_1 = track;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cQuentin_mPort_mOverlayTextColour
class _0RL_cd_33742A71C73D0017_b7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_b7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  Quentin::Port::OverlayTextColour arg_1;
};

void _0RL_cd_33742A71C73D0017_b7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_b7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  (Quentin::Port::OverlayTextColour&)arg_1 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_b7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b7000000* tcd = (_0RL_cd_33742A71C73D0017_b7000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setOverlayClipTitle(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::setOverlayClipTitle(const ::CORBA::WChar* clipname, ::Quentin::Port::OverlayTextColour colour)
{
  _0RL_cd_33742A71C73D0017_b7000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c7000000, "setOverlayClipTitle", 20);
  _call_desc.arg_0 = clipname;
  _call_desc.arg_1 = colour;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cboolean
class _0RL_cd_33742A71C73D0017_d7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_33742A71C73D0017_d7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_33742A71C73D0017_d7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_d7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d7000000* tcd = (_0RL_cd_33742A71C73D0017_d7000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setOverlayIndicator(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::setOverlayIndicator(const ::CORBA::WChar* indicator, ::CORBA::Boolean active)
{
  _0RL_cd_33742A71C73D0017_d7000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e7000000, "setOverlayIndicator", 20);
  _call_desc.arg_0 = indicator;
  _call_desc.arg_1 = active;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e5000000* tcd = (_0RL_cd_33742A71C73D0017_e5000000*)cd;
  Quentin::_impl_Port* impl = (Quentin::_impl_Port*) svnt->_ptrToInterface(Quentin::Port::_PD_repoId);
  impl->setOverlayTallyID(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_Port::setOverlayTallyID(::CORBA::Long id, ::CORBA::Boolean numeric)
{
  _0RL_cd_33742A71C73D0017_e5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f7000000, "setOverlayTallyID", 18);
  _call_desc.arg_0 = id;
  _call_desc.arg_1 = numeric;

  _invoke(_call_desc);



}
Quentin::_pof_Port::~_pof_Port() {}


omniObjRef*
Quentin::_pof_Port::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_Port(ior, id);
}


::CORBA::Boolean
Quentin::_pof_Port::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::Port::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, Quentin::Properties::_PD_repoId) )
    return 1;


  return 0;
}

const Quentin::_pof_Port _the_pof_Quentin_mPort;

Quentin::_impl_Port::~_impl_Port() {}


::CORBA::Boolean
Quentin::_impl_Port::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "changeFlags") ) {

    _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f1000000, "changeFlags", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setMode") ) {

    _0RL_cd_33742A71C73D0017_02000000 _call_desc(_0RL_lcfn_33742A71C73D0017_12000000, "setMode", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset") ) {

    _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_22000000, "reset", 6, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "resetTriggers") ) {

    _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_32000000, "resetTriggers", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "resetTracks") ) {

    _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_42000000, "resetTracks", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTrackLimits") ) {

    _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_52000000, "setTrackLimits", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getStatus") ) {

    _0RL_cd_33742A71C73D0017_62000000 _call_desc(_0RL_lcfn_33742A71C73D0017_72000000, "getStatus", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reportStatus") ) {

    _0RL_cd_33742A71C73D0017_82000000 _call_desc(_0RL_lcfn_33742A71C73D0017_92000000, "reportStatus", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTrigger") ) {

    _0RL_cd_33742A71C73D0017_a2000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b2000000, "setTrigger", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "actionAtTrigger") ) {

    _0RL_cd_33742A71C73D0017_c2000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d2000000, "actionAtTrigger", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTrigger") ) {

    _0RL_cd_33742A71C73D0017_e2000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f2000000, "getTrigger", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTriggers") ) {

    _0RL_cd_33742A71C73D0017_03000000 _call_desc(_0RL_lcfn_33742A71C73D0017_13000000, "getTriggers", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPortFragments") ) {

    _0RL_cd_33742A71C73D0017_23000000 _call_desc(_0RL_lcfn_33742A71C73D0017_33000000, "getPortFragments", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPortTypeFragments") ) {

    _0RL_cd_33742A71C73D0017_43000000 _call_desc(_0RL_lcfn_33742A71C73D0017_53000000, "getPortTypeFragments", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPortTrackFragments") ) {

    _0RL_cd_33742A71C73D0017_63000000 _call_desc(_0RL_lcfn_33742A71C73D0017_73000000, "getPortTrackFragments", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getThumbnailSize") ) {

    _0RL_cd_33742A71C73D0017_83000000 _call_desc(_0RL_lcfn_33742A71C73D0017_93000000, "getThumbnailSize", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setThumbnailListener") ) {

    _0RL_cd_33742A71C73D0017_a3000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b3000000, "setThumbnailListener", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requestThumbnails") ) {

    _0RL_cd_33742A71C73D0017_c3000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d3000000, "requestThumbnails", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "abortThumbnails") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e3000000, "abortThumbnails", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "controllerNames") ) {

    _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f3000000, "controllerNames", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getController") ) {

    _0RL_cd_33742A71C73D0017_04000000 _call_desc(_0RL_lcfn_33742A71C73D0017_14000000, "getController", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPortInfo") ) {

    _0RL_cd_33742A71C73D0017_24000000 _call_desc(_0RL_lcfn_33742A71C73D0017_34000000, "getPortInfo", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDirViewer") ) {

    _0RL_cd_33742A71C73D0017_44000000 _call_desc(_0RL_lcfn_33742A71C73D0017_54000000, "getDirViewer", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPoolDirViewer") ) {

    _0RL_cd_33742A71C73D0017_64000000 _call_desc(_0RL_lcfn_33742A71C73D0017_74000000, "getPoolDirViewer", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getConfigurations") ) {

    _0RL_cd_33742A71C73D0017_84000000 _call_desc(_0RL_lcfn_33742A71C73D0017_94000000, "getConfigurations", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDefaultConfigurations") ) {

    _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b4000000, "getDefaultConfigurations", 25, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCurrentConfigurations") ) {

    _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c4000000, "getCurrentConfigurations", 25, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "configure") ) {

    _0RL_cd_33742A71C73D0017_d4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e4000000, "configure", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "assignChannel") ) {

    _0RL_cd_33742A71C73D0017_f4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_05000000, "assignChannel", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "assignTransitionPort") ) {

    _0RL_cd_33742A71C73D0017_15000000 _call_desc(_0RL_lcfn_33742A71C73D0017_25000000, "assignTransitionPort", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTransitionPort") ) {

    _0RL_cd_33742A71C73D0017_35000000 _call_desc(_0RL_lcfn_33742A71C73D0017_45000000, "getTransitionPort", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getChannels") ) {

    _0RL_cd_33742A71C73D0017_55000000 _call_desc(_0RL_lcfn_33742A71C73D0017_65000000, "getChannels", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "release") ) {

    _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_75000000, "release", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "load") ) {

    _0RL_cd_33742A71C73D0017_85000000 _call_desc(_0RL_lcfn_33742A71C73D0017_95000000, "load", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "insertBlank") ) {

    _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a5000000, "insertBlank", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove") ) {

    _0RL_cd_33742A71C73D0017_b5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c5000000, "remove", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "wipe") ) {

    _0RL_cd_33742A71C73D0017_b5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d5000000, "wipe", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "jump") ) {

    _0RL_cd_33742A71C73D0017_e5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f5000000, "jump", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "jumpRelative") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_06000000, "jumpRelative", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setJump") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_16000000, "setJump", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTransition") ) {

    _0RL_cd_33742A71C73D0017_26000000 _call_desc(_0RL_lcfn_33742A71C73D0017_36000000, "setTransition", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setSpeed") ) {

    _0RL_cd_33742A71C73D0017_46000000 _call_desc(_0RL_lcfn_33742A71C73D0017_56000000, "setSpeed", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "jogAudio") ) {

    _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_76000000, "jogAudio", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "jogSubFrames") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_86000000, "jogSubFrames", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setInputAudioPatch") ) {

    _0RL_cd_33742A71C73D0017_96000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a6000000, "setInputAudioPatch", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setOutputAudioPatch") ) {

    _0RL_cd_33742A71C73D0017_b6000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c6000000, "setOutputAudioPatch", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "extendSpace") ) {

    _0RL_cd_33742A71C73D0017_d6000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e6000000, "extendSpace", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "forget") ) {

    _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f6000000, "forget", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setFlags") ) {

    _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_07000000, "setFlags", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCrop") ) {

    _0RL_cd_33742A71C73D0017_17000000 _call_desc(_0RL_lcfn_33742A71C73D0017_27000000, "setCrop", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setAspect") ) {

    _0RL_cd_33742A71C73D0017_37000000 _call_desc(_0RL_lcfn_33742A71C73D0017_47000000, "setAspect", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setOriginator") ) {

    _0RL_cd_33742A71C73D0017_57000000 _call_desc(_0RL_lcfn_33742A71C73D0017_67000000, "setOriginator", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setRecordTimecodes") ) {

    _0RL_cd_33742A71C73D0017_77000000 _call_desc(_0RL_lcfn_33742A71C73D0017_87000000, "setRecordTimecodes", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRushRecording") ) {

    _0RL_cd_33742A71C73D0017_97000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a7000000, "getRushRecording", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setOverlayClipTitle") ) {

    _0RL_cd_33742A71C73D0017_b7000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c7000000, "setOverlayClipTitle", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setOverlayIndicator") ) {

    _0RL_cd_33742A71C73D0017_d7000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e7000000, "setOverlayIndicator", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setOverlayTallyID") ) {

    _0RL_cd_33742A71C73D0017_e5000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f7000000, "setOverlayTallyID", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


#ifndef _MSC_VER
  if( _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Properties*)this)->
      _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
Quentin::_impl_Port::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::Port::_PD_repoId )
    return (::Quentin::_impl_Port*) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::_impl_Properties*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::Port::_PD_repoId) )
    return (::Quentin::_impl_Port*) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::_impl_Properties*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_Port::_mostDerivedRepoId()
{
  return ::Quentin::Port::_PD_repoId;
}

Quentin::Server_ptr Quentin::Server_Helper::_nil() {
  return ::Quentin::Server::_nil();
}

::CORBA::Boolean Quentin::Server_Helper::is_nil(::Quentin::Server_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::Server_Helper::release(::Quentin::Server_ptr p) {
  ::CORBA::release(p);
}

void Quentin::Server_Helper::marshalObjRef(::Quentin::Server_ptr obj, cdrStream& s) {
  ::Quentin::Server::_marshalObjRef(obj, s);
}

Quentin::Server_ptr Quentin::Server_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::Server::_unmarshalObjRef(s);
}

void Quentin::Server_Helper::duplicate(::Quentin::Server_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::Server_ptr
Quentin::Server::_duplicate(::Quentin::Server_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::Server_ptr
Quentin::Server::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::Server_ptr
Quentin::Server::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::Server_ptr
Quentin::Server::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Server _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Server* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Server;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::Server::_PD_repoId = "IDL:Quentin/Server:1.0";


Quentin::_objref_Server::~_objref_Server() {

}


Quentin::_objref_Server::_objref_Server(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::Server::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(Quentin::)_objref_Properties(ior, id)

{
  _PR_setobj(this);
}

void*
Quentin::_objref_Server::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::Server::_PD_repoId )
    return (::Quentin::Server_ptr) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::Properties_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::Server::_PD_repoId) )
    return (::Quentin::Server_ptr) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::Properties_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerInfo
class _0RL_cd_33742A71C73D0017_08000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_08000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::ServerInfo_var result;
};

void _0RL_cd_33742A71C73D0017_08000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerInfo&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_08000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerInfo;
  (Quentin::ServerInfo&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_08000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_18000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_08000000* tcd = (_0RL_cd_33742A71C73D0017_08000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getServerInfo();


}

Quentin::ServerInfo* Quentin::_objref_Server::getServerInfo()
{
  _0RL_cd_33742A71C73D0017_08000000 _call_desc(_0RL_lcfn_33742A71C73D0017_18000000, "getServerInfo", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPort_i_cwstring_i_clong
class _0RL_cd_33742A71C73D0017_28000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_28000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::Long arg_1;
  Quentin::Port_var result;
};

void _0RL_cd_33742A71C73D0017_28000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_28000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_28000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::Port::_marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_28000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::Port::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_28000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_38000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_28000000* tcd = (_0RL_cd_33742A71C73D0017_28000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getPort(tcd->arg_0, tcd->arg_1);


}

Quentin::Port_ptr Quentin::_objref_Server::getPort(const ::CORBA::WChar* ident, ::CORBA::Long number)
{
  _0RL_cd_33742A71C73D0017_28000000 _call_desc(_0RL_lcfn_33742A71C73D0017_38000000, "getPort", 8);
  _call_desc.arg_0 = ident;
  _call_desc.arg_1 = number;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_48000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_20000000* tcd = (_0RL_cd_33742A71C73D0017_20000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getPortNames();


}

Quentin::WStrings* Quentin::_objref_Server::getPortNames()
{
  _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_48000000, "getPortNames", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_58000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_20000000* tcd = (_0RL_cd_33742A71C73D0017_20000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getChanPorts();


}

Quentin::WStrings* Quentin::_objref_Server::getChanPorts()
{
  _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_58000000, "getChanPorts", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _clonglong_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_68000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_68000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::LongLong result;
};

void _0RL_cd_33742A71C73D0017_68000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_68000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_68000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_68000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::LongLong&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_68000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_68000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_78000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_68000000* tcd = (_0RL_cd_33742A71C73D0017_68000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFreeProtons(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFreeProtons(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getFreeProtons(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::LongLong Quentin::_objref_Server::getFreeProtons(::CORBA::Long poolIdent)
{
  _0RL_cd_33742A71C73D0017_68000000 _call_desc(_0RL_lcfn_33742A71C73D0017_78000000, "getFreeProtons", 15);
  _call_desc.arg_0 = poolIdent;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_88000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_55000000* tcd = (_0RL_cd_33742A71C73D0017_55000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getPools();


}

Quentin::Longs* Quentin::_objref_Server::getPools()
{
  _0RL_cd_33742A71C73D0017_55000000 _call_desc(_0RL_lcfn_33742A71C73D0017_88000000, "getPools", 9);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_98000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getRefTime();


}

Quentin::Timecode Quentin::_objref_Server::getRefTime()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_98000000, "getRefTime", 11);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_84000000* tcd = (_0RL_cd_33742A71C73D0017_84000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getConfigurations(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getConfigurations(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getConfigurations(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ConfigDescriptionList* Quentin::_objref_Server::getConfigurations(::CORBA::Long channel, ::Quentin::FragmentType type, ::CORBA::Boolean forPlay)
{
  _0RL_cd_33742A71C73D0017_84000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a8000000, "getConfigurations", 18);
  _call_desc.arg_0 = channel;
  _call_desc.arg_1 = type;
  _call_desc.arg_2 = forPlay;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a4000000* tcd = (_0RL_cd_33742A71C73D0017_a4000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getDefaultConfigurations(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getDefaultConfigurations(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getDefaultConfigurations(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_Server::getDefaultConfigurations(::CORBA::Long channel)
{
  _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b8000000, "getDefaultConfigurations", 25);
  _call_desc.arg_0 = channel;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a4000000* tcd = (_0RL_cd_33742A71C73D0017_a4000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getCurrentConfigurations(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getCurrentConfigurations(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getCurrentConfigurations(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_Server::getCurrentConfigurations(::CORBA::Long channel)
{
  _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c8000000, "getCurrentConfigurations", 25);
  _call_desc.arg_0 = channel;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerCapabilities
class _0RL_cd_33742A71C73D0017_d8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d8000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::ServerCapabilities_var result;
};

void _0RL_cd_33742A71C73D0017_d8000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerCapabilities&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_d8000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerCapabilities;
  (Quentin::ServerCapabilities&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_d8000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d8000000* tcd = (_0RL_cd_33742A71C73D0017_d8000000*)cd;
  Quentin::_impl_Server* impl = (Quentin::_impl_Server*) svnt->_ptrToInterface(Quentin::Server::_PD_repoId);
  tcd->result = impl->getServerCapabilities();


}

Quentin::ServerCapabilities* Quentin::_objref_Server::getServerCapabilities()
{
  _0RL_cd_33742A71C73D0017_d8000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e8000000, "getServerCapabilities", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
Quentin::_pof_Server::~_pof_Server() {}


omniObjRef*
Quentin::_pof_Server::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_Server(ior, id);
}


::CORBA::Boolean
Quentin::_pof_Server::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::Server::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, Quentin::Properties::_PD_repoId) )
    return 1;


  return 0;
}

const Quentin::_pof_Server _the_pof_Quentin_mServer;

Quentin::_impl_Server::~_impl_Server() {}


::CORBA::Boolean
Quentin::_impl_Server::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getServerInfo") ) {

    _0RL_cd_33742A71C73D0017_08000000 _call_desc(_0RL_lcfn_33742A71C73D0017_18000000, "getServerInfo", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPort") ) {

    _0RL_cd_33742A71C73D0017_28000000 _call_desc(_0RL_lcfn_33742A71C73D0017_38000000, "getPort", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPortNames") ) {

    _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_48000000, "getPortNames", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getChanPorts") ) {

    _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_58000000, "getChanPorts", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFreeProtons") ) {

    _0RL_cd_33742A71C73D0017_68000000 _call_desc(_0RL_lcfn_33742A71C73D0017_78000000, "getFreeProtons", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPools") ) {

    _0RL_cd_33742A71C73D0017_55000000 _call_desc(_0RL_lcfn_33742A71C73D0017_88000000, "getPools", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRefTime") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_98000000, "getRefTime", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getConfigurations") ) {

    _0RL_cd_33742A71C73D0017_84000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a8000000, "getConfigurations", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDefaultConfigurations") ) {

    _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b8000000, "getDefaultConfigurations", 25, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCurrentConfigurations") ) {

    _0RL_cd_33742A71C73D0017_a4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c8000000, "getCurrentConfigurations", 25, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getServerCapabilities") ) {

    _0RL_cd_33742A71C73D0017_d8000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e8000000, "getServerCapabilities", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


#ifndef _MSC_VER
  if( _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Properties*)this)->
      _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
Quentin::_impl_Server::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::Server::_PD_repoId )
    return (::Quentin::_impl_Server*) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::_impl_Properties*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::Server::_PD_repoId) )
    return (::Quentin::_impl_Server*) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::_impl_Properties*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_Server::_mostDerivedRepoId()
{
  return ::Quentin::Server::_PD_repoId;
}

Quentin::DirectoryViewer_ptr Quentin::DirectoryViewer_Helper::_nil() {
  return ::Quentin::DirectoryViewer::_nil();
}

::CORBA::Boolean Quentin::DirectoryViewer_Helper::is_nil(::Quentin::DirectoryViewer_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::DirectoryViewer_Helper::release(::Quentin::DirectoryViewer_ptr p) {
  ::CORBA::release(p);
}

void Quentin::DirectoryViewer_Helper::marshalObjRef(::Quentin::DirectoryViewer_ptr obj, cdrStream& s) {
  ::Quentin::DirectoryViewer::_marshalObjRef(obj, s);
}

Quentin::DirectoryViewer_ptr Quentin::DirectoryViewer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::DirectoryViewer::_unmarshalObjRef(s);
}

void Quentin::DirectoryViewer_Helper::duplicate(::Quentin::DirectoryViewer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::DirectoryViewer_ptr
Quentin::DirectoryViewer::_duplicate(::Quentin::DirectoryViewer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::DirectoryViewer_ptr
Quentin::DirectoryViewer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::DirectoryViewer_ptr
Quentin::DirectoryViewer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::DirectoryViewer_ptr
Quentin::DirectoryViewer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DirectoryViewer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DirectoryViewer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DirectoryViewer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::DirectoryViewer::_PD_repoId = "IDL:Quentin/DirectoryViewer:1.0";


Quentin::_objref_DirectoryViewer::~_objref_DirectoryViewer() {

}


Quentin::_objref_DirectoryViewer::_objref_DirectoryViewer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::DirectoryViewer::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(Quentin::)_objref_Properties(ior, id)

{
  _PR_setobj(this);
}

void*
Quentin::_objref_DirectoryViewer::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::DirectoryViewer::_PD_repoId )
    return (::Quentin::DirectoryViewer_ptr) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::Properties_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::DirectoryViewer::_PD_repoId) )
    return (::Quentin::DirectoryViewer_ptr) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::Properties_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mColumnDescList
class _0RL_cd_33742A71C73D0017_f8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_f8000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::ColumnDescList_var result;
};

void _0RL_cd_33742A71C73D0017_f8000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ColumnDescList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_f8000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ColumnDescList;
  (Quentin::ColumnDescList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_f8000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_09000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f8000000* tcd = (_0RL_cd_33742A71C73D0017_f8000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->getColumnDescriptions();


}

Quentin::ColumnDescList* Quentin::_objref_DirectoryViewer::getColumnDescriptions()
{
  _0RL_cd_33742A71C73D0017_f8000000 _call_desc(_0RL_lcfn_33742A71C73D0017_09000000, "getColumnDescriptions", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_e_cQuentin_mBadColumnData
class _0RL_cd_33742A71C73D0017_19000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_19000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
};

void _0RL_cd_33742A71C73D0017_19000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_19000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_19000000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_19000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_29000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_19000000* tcd = (_0RL_cd_33742A71C73D0017_19000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setDatabase(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->setDatabase(tcd->arg_0);
  else {
    try {
      impl->setDatabase(tcd->arg_0);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_DirectoryViewer::setDatabase(::CORBA::Long databaseNum)
{
  _0RL_cd_33742A71C73D0017_19000000 _call_desc(_0RL_lcfn_33742A71C73D0017_29000000, "setDatabase", 12);
  _call_desc.arg_0 = databaseNum;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mClipPropertyList_i_cQuentin_mServerFragments_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments
class _0RL_cd_33742A71C73D0017_39000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_39000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_39000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_39000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_39000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_39000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_39000000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_39000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_49000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_39000000* tcd = (_0RL_cd_33742A71C73D0017_39000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createClip(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createClip(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->createClip(*tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::createClip(const ::Quentin::ClipPropertyList& props, const ::Quentin::ServerFragments& frags)
{
  _0RL_cd_33742A71C73D0017_39000000 _call_desc(_0RL_lcfn_33742A71C73D0017_49000000, "createClip", 11);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) frags;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mClipPropertyList_i_cQuentin_mServerFragments_i_clong_i_clong_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_59000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_59000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 6, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_59000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_59000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

void _0RL_cd_33742A71C73D0017_59000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_59000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_59000000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_59000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_69000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_59000000* tcd = (_0RL_cd_33742A71C73D0017_59000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createPlacedClip(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createPlacedClip(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      tcd->result = impl->createPlacedClip(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::createPlacedClip(const ::Quentin::ClipPropertyList& props, const ::Quentin::ServerFragments& frags, ::CORBA::Long poolIdent, ::CORBA::Long ticket, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_59000000 _call_desc(_0RL_lcfn_33742A71C73D0017_69000000, "createPlacedClip", 17);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) frags;
  _call_desc.arg_2 = poolIdent;
  _call_desc.arg_3 = ticket;
  _call_desc.arg_4 = priority;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_cQuentin_mServerFragments_i_cQuentin_mLongs_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments
class _0RL_cd_33742A71C73D0017_79000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_79000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ServerFragments_var arg_0_;
  const Quentin::ServerFragments* arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_79000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ServerFragments&) *arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_79000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_79000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_79000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_79000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_79000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_89000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_79000000* tcd = (_0RL_cd_33742A71C73D0017_79000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->findFragsOnPools(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->findFragsOnPools(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->findFragsOnPools(*tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_DirectoryViewer::findFragsOnPools(const ::Quentin::ServerFragments& frags, const ::Quentin::Longs& pools)
{
  _0RL_cd_33742A71C73D0017_79000000 _call_desc(_0RL_lcfn_33742A71C73D0017_89000000, "findFragsOnPools", 17);
  _call_desc.arg_0 = &(::Quentin::ServerFragments&) frags;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_clong_i_cQuentin_mLongs_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments
class _0RL_cd_33742A71C73D0017_99000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_99000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_99000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_99000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_99000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_99000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_99000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_99000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_99000000* tcd = (_0RL_cd_33742A71C73D0017_99000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->findClipOnPools(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->findClipOnPools(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->findClipOnPools(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_DirectoryViewer::findClipOnPools(::CORBA::Long clipID, const ::Quentin::Longs& pools)
{
  _0RL_cd_33742A71C73D0017_99000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a9000000, "findClipOnPools", 16);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_b9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_b9000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_b9000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_b9000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_b9000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_b9000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_b9000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_b9000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b9000000* tcd = (_0RL_cd_33742A71C73D0017_b9000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getAllFragments(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getAllFragments(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getAllFragments(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getAllFragments(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_b9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c9000000, "getAllFragments", 16);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_d9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d9000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_d9000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_d9000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_d9000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_d9000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_d9000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_d9000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d9000000* tcd = (_0RL_cd_33742A71C73D0017_d9000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getFragments(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e9000000, "getFragments", 13);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_f9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_f9000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_f9000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_f9000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_f9000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_f9000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_f9000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_f9000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_0a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f9000000* tcd = (_0RL_cd_33742A71C73D0017_f9000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFragmentsWithMode(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFragmentsWithMode(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->getFragmentsWithMode(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getFragmentsWithMode(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish, ::CORBA::Long playMode)
{
  _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0a000000, "getFragmentsWithMode", 21);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;
  _call_desc.arg_3 = playMode;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_1a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_1a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_1a000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_1a000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_1a000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_1a000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_1a000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_1a000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_2a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_1a000000* tcd = (_0RL_cd_33742A71C73D0017_1a000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTypeFragments(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTypeFragments(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getTypeFragments(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getTypeFragments(::CORBA::Long clipID, ::CORBA::Long trackType)
{
  _0RL_cd_33742A71C73D0017_1a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_2a000000, "getTypeFragments", 17);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_3a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f9000000* tcd = (_0RL_cd_33742A71C73D0017_f9000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSubTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSubTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->getSubTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getSubTypeFragments(::CORBA::Long clipID, ::CORBA::Long trackType, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3a000000, "getSubTypeFragments", 20);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;
  _call_desc.arg_2 = start;
  _call_desc.arg_3 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_4a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d9000000* tcd = (_0RL_cd_33742A71C73D0017_d9000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getTrackFragments(::CORBA::Long clipID, ::CORBA::Long trackType, ::CORBA::Long trackNum)
{
  _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_4a000000, "getTrackFragments", 18);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;
  _call_desc.arg_2 = trackNum;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_i_clong_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_5a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_5a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_5a000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_5a000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

void _0RL_cd_33742A71C73D0017_5a000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_5a000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_5a000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_5a000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_6a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_5a000000* tcd = (_0RL_cd_33742A71C73D0017_5a000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSubTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSubTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      tcd->result = impl->getSubTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getSubTrackFragments(::CORBA::Long clipID, ::CORBA::Long trackType, ::CORBA::Long trackNum, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_5a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6a000000, "getSubTrackFragments", 21);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;
  _call_desc.arg_2 = trackNum;
  _call_desc.arg_3 = start;
  _call_desc.arg_4 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServerFragments_i_clong_i_clong_i_clong_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_7a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_7a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  Quentin::ServerFragments_var result;
};

void _0RL_cd_33742A71C73D0017_7a000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_7a000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_7a000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ServerFragments&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_7a000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_7a000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_7a000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_8a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_7a000000* tcd = (_0RL_cd_33742A71C73D0017_7a000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSourceTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSourceTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getSourceTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_DirectoryViewer::getSourceTimecode(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_7a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8a000000, "getSourceTimecode", 18);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_clong_i_cQuentin_mWStrings_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_9a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_9a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::WStrings_var arg_1_;
  const Quentin::WStrings* arg_1;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_9a000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::WStrings&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_9a000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_9a000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_9a000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_9a000000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_9a000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_aa000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_9a000000* tcd = (_0RL_cd_33742A71C73D0017_9a000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getClipData(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getClipData(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->getClipData(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_DirectoryViewer::getClipData(::CORBA::Long clipID, const ::Quentin::WStrings& colsWanted)
{
  _0RL_cd_33742A71C73D0017_9a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_aa000000, "getClipData", 12);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::WStrings&) colsWanted;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_cQuentin_mClipPropertyList_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_ba000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ba000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::ClipPropertyList_var arg_1_;
  const Quentin::ClipPropertyList* arg_1;
};

void _0RL_cd_33742A71C73D0017_ba000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::ClipPropertyList&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_ba000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_33742A71C73D0017_ba000000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_ba000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_ca000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ba000000* tcd = (_0RL_cd_33742A71C73D0017_ba000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->updateClip(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->updateClip(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->updateClip(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_DirectoryViewer::updateClip(::CORBA::Long clipID, const ::Quentin::ClipPropertyList& newColumns)
{
  _0RL_cd_33742A71C73D0017_ba000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ca000000, "updateClip", 11);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::ClipPropertyList&) newColumns;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_da000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_da000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_da000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_da000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_da000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_da000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_da000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_da000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_ea000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_da000000* tcd = (_0RL_cd_33742A71C73D0017_da000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->deleteClip(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->deleteClip(tcd->arg_0);
  else {
    try {
      tcd->result = impl->deleteClip(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_DirectoryViewer::deleteClip(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_da000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ea000000, "deleteClip", 11);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_fa000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_fa000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_fa000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_fa000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_fa000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_fa000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_fa000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_fa000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_0b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_fa000000* tcd = (_0RL_cd_33742A71C73D0017_fa000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->trimUnrecorded(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->trimUnrecorded(tcd->arg_0);
  else {
    try {
      tcd->result = impl->trimUnrecorded(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::trimUnrecorded(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_fa000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0b000000, "trimUnrecorded", 15);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_cQuentin_mConflictMode_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_1b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_1b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::ConflictMode arg_2;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_1b000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_1b000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (Quentin::ConflictMode&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_1b000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_1b000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_1b000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_1b000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_2b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_1b000000* tcd = (_0RL_cd_33742A71C73D0017_1b000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->numberClip(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->numberClip(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->numberClip(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::numberClip(::CORBA::Long clipID, ::CORBA::Long number, ::Quentin::ConflictMode confMode)
{
  _0RL_cd_33742A71C73D0017_1b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_2b000000, "numberClip", 11);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = number;
  _call_desc.arg_2 = confMode;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_cQuentin_mFindMode_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_3b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_3b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::FindMode arg_2;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_3b000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_3b000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (Quentin::FindMode&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_3b000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_3b000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_3b000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_3b000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_4b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_3b000000* tcd = (_0RL_cd_33742A71C73D0017_3b000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->scanNumbers(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->scanNumbers(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->scanNumbers(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::scanNumbers(::CORBA::Long poolID, ::CORBA::Long number, ::Quentin::FindMode mode)
{
  _0RL_cd_33742A71C73D0017_3b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_4b000000, "scanNumbers", 12);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = number;
  _call_desc.arg_2 = mode;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace
class _0RL_cd_33742A71C73D0017_5b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_5b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_5b000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_5b000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_5b000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_5b000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_5b000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_5b000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_6b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_5b000000* tcd = (_0RL_cd_33742A71C73D0017_5b000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->cloneClip(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->cloneClip(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->cloneClip(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::cloneClip(::CORBA::Long clipID, ::CORBA::Long poolIdent, ::CORBA::Long ticket, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_5b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6b000000, "cloneClip", 10);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = poolIdent;
  _call_desc.arg_2 = ticket;
  _call_desc.arg_3 = priority;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_clong_i_clong_i_clong_o_cboolean_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace
class _0RL_cd_33742A71C73D0017_7b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_7b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  ::CORBA::Boolean arg_5;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_7b000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_7b000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

void _0RL_cd_33742A71C73D0017_7b000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  _n.marshalBoolean(arg_5);

}

void _0RL_cd_33742A71C73D0017_7b000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;
  arg_5 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_7b000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_7b000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_8b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_7b000000* tcd = (_0RL_cd_33742A71C73D0017_7b000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->cloneIfNeeded(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5);
#else
  if (!cd->is_upcall())
    tcd->result = impl->cloneIfNeeded(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5);
  else {
    try {
      tcd->result = impl->cloneIfNeeded(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::cloneIfNeeded(::CORBA::Long clipID, ::CORBA::Long poolIdent, ::CORBA::Long ticket, ::CORBA::Long priority, ::CORBA::Long expirySecs, ::CORBA::Boolean& copyCreated)
{
  _0RL_cd_33742A71C73D0017_7b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8b000000, "cloneIfNeeded", 14);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = poolIdent;
  _call_desc.arg_2 = ticket;
  _call_desc.arg_3 = priority;
  _call_desc.arg_4 = expirySecs;

  _invoke(_call_desc);
  copyCreated = _call_desc.arg_5;
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_cQuentin_mServerFragments_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments
class _0RL_cd_33742A71C73D0017_9b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_9b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::ServerFragments_var arg_2_;
  const Quentin::ServerFragments* arg_2;
};

void _0RL_cd_33742A71C73D0017_9b000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  (const Quentin::ServerFragments&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_9b000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_33742A71C73D0017_9b000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_9b000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_ab000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_9b000000* tcd = (_0RL_cd_33742A71C73D0017_9b000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->replaceContent(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->replaceContent(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
  else {
    try {
      impl->replaceContent(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_DirectoryViewer::replaceContent(::CORBA::Long clipID, ::CORBA::Long contentType, const ::Quentin::ServerFragments& frags)
{
  _0RL_cd_33742A71C73D0017_9b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ab000000, "replaceContent", 15);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = contentType;
  _call_desc.arg_2 = &(::Quentin::ServerFragments&) frags;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_bb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_bb000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_bb000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_bb000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_bb000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_bb000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_bb000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_bb000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_cb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_bb000000* tcd = (_0RL_cd_33742A71C73D0017_bb000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getNumberedClip(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getNumberedClip(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getNumberedClip(tcd->arg_0);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::getNumberedClip(::CORBA::Long number)
{
  _0RL_cd_33742A71C73D0017_bb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_cb000000, "getNumberedClip", 16);
  _call_desc.arg_0 = number;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mWStrings_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_db000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_db000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::WStrings_var arg_0_;
  const Quentin::WStrings* arg_0;
};

void _0RL_cd_33742A71C73D0017_db000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::WStrings&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_db000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_db000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_db000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_eb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_db000000* tcd = (_0RL_cd_33742A71C73D0017_db000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setColumnSelection(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->setColumnSelection(*tcd->arg_0);
  else {
    try {
      impl->setColumnSelection(*tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_DirectoryViewer::setColumnSelection(const ::Quentin::WStrings& colsWanted)
{
  _0RL_cd_33742A71C73D0017_db000000 _call_desc(_0RL_lcfn_33742A71C73D0017_eb000000, "setColumnSelection", 19);
  _call_desc.arg_0 = &(::Quentin::WStrings&) colsWanted;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_fb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_fb000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_fb000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_fb000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_fb000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_fb000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_0c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_fb000000* tcd = (_0RL_cd_33742A71C73D0017_fb000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getColumnSelection();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getColumnSelection();
  else {
    try {
      tcd->result = impl->getColumnSelection();
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_DirectoryViewer::getColumnSelection()
{
  _0RL_cd_33742A71C73D0017_fb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0c000000, "getColumnSelection", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_1c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_66000000* tcd = (_0RL_cd_33742A71C73D0017_66000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->maxSearchHits(tcd->arg_0);


}

::CORBA::Long Quentin::_objref_DirectoryViewer::maxSearchHits(::CORBA::Long newMax)
{
  _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1c000000, "maxSearchHits", 14);
  _call_desc.arg_0 = newMax;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mClipPropertyList_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_2c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_2c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_2c000000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_2c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_2c000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_2c000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_2c000000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_2c000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_3c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_2c000000* tcd = (_0RL_cd_33742A71C73D0017_2c000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->search(*tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->search(*tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->search(*tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::search(const ::Quentin::ClipPropertyList& props, ::CORBA::Long max)
{
  _0RL_cd_33742A71C73D0017_2c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3c000000, "search", 7);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = max;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_clong
class _0RL_cd_33742A71C73D0017_4c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_4c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_4c000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_4c000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_4c000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_4c000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_4c000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_5c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_4c000000* tcd = (_0RL_cd_33742A71C73D0017_4c000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->getSearchResults(tcd->arg_0);


}

Quentin::WStrings* Quentin::_objref_DirectoryViewer::getSearchResults(::CORBA::Long numRows)
{
  _0RL_cd_33742A71C73D0017_4c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5c000000, "getSearchResults", 17);
  _call_desc.arg_0 = numRows;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_6c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_66000000* tcd = (_0RL_cd_33742A71C73D0017_66000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->moveSearch(tcd->arg_0);


}

::CORBA::Long Quentin::_objref_DirectoryViewer::moveSearch(::CORBA::Long newPos)
{
  _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6c000000, "moveSearch", 11);
  _call_desc.arg_0 = newPos;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_7c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->getSearchPos();


}

::CORBA::Long Quentin::_objref_DirectoryViewer::getSearchPos()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_7c000000, "getSearchPos", 13);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_8c000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  impl->closeSearch();


}

void Quentin::_objref_DirectoryViewer::closeSearch()
{
  _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8c000000, "closeSearch", 12);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_cwstring_i_cwstring_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_9c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_9c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::WString_var arg_1_;
  const ::CORBA::WChar* arg_1;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_9c000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_33742A71C73D0017_9c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_9c000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_9c000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_9c000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_9c000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_ac000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_9c000000* tcd = (_0RL_cd_33742A71C73D0017_9c000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTaggedClips(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTaggedClips(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getTaggedClips(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_DirectoryViewer::getTaggedClips(const ::CORBA::WChar* tag, const ::CORBA::WChar* keys)
{
  _0RL_cd_33742A71C73D0017_9c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ac000000, "getTaggedClips", 15);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = keys;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_bc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_83000000* tcd = (_0RL_cd_33742A71C73D0017_83000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_DirectoryViewer::getThumbnailSize(::CORBA::Long mode, ::CORBA::Long& width, ::CORBA::Long& height)
{
  _0RL_cd_33742A71C73D0017_83000000 _call_desc(_0RL_lcfn_33742A71C73D0017_bc000000, "getThumbnailSize", 17);
  _call_desc.arg_0 = mode;

  _invoke(_call_desc);
  width = _call_desc.arg_1;
  height = _call_desc.arg_2;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_cQuentin_mPositionData_i_clong_i_clong_i_clong_i_clong_i_cQuentin_mThumbnailListener_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_cc000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_cc000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::PositionData arg_1_;
  const Quentin::PositionData* arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  ::CORBA::Long arg_5;
  Quentin::ThumbnailListener_var arg_6_;
  Quentin::ThumbnailListener_ptr arg_6;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_cc000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::PositionData&) *arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;
  arg_5 >>= _n;
  Quentin::ThumbnailListener::_marshalObjRef(arg_6,_n);

}

void _0RL_cd_33742A71C73D0017_cc000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (Quentin::PositionData&)arg_1_ <<= _n;
  arg_1 = &arg_1_;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;
  (::CORBA::Long&)arg_5 <<= _n;
  arg_6_ = Quentin::ThumbnailListener::_unmarshalObjRef(_n);
  arg_6 = arg_6_.in();

}

void _0RL_cd_33742A71C73D0017_cc000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_cc000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_cc000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_cc000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_dc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_cc000000* tcd = (_0RL_cd_33742A71C73D0017_cc000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->requestThumbnails(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
#else
  if (!cd->is_upcall())
    tcd->result = impl->requestThumbnails(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
  else {
    try {
      tcd->result = impl->requestThumbnails(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::requestThumbnails(::CORBA::Long mode, const ::Quentin::PositionData& fragment, ::CORBA::Long offset, ::CORBA::Long stride, ::CORBA::Long count, ::CORBA::Long ident, ::Quentin::ThumbnailListener_ptr listener)
{
  _0RL_cd_33742A71C73D0017_cc000000 _call_desc(_0RL_lcfn_33742A71C73D0017_dc000000, "requestThumbnails", 18);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = &(::Quentin::PositionData&) fragment;
  _call_desc.arg_2 = offset;
  _call_desc.arg_3 = stride;
  _call_desc.arg_4 = count;
  _call_desc.arg_5 = ident;
  _call_desc.arg_6 = listener;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_ec000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  impl->abortThumbnails(tcd->arg_0);


}

void Quentin::_objref_DirectoryViewer::abortThumbnails(::CORBA::Long abortID)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ec000000, "abortThumbnails", 16);
  _call_desc.arg_0 = abortID;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_fc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->getTicket();


}

::CORBA::Long Quentin::_objref_DirectoryViewer::getTicket()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_fc000000, "getTicket", 10);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_0d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  impl->freeTicket(tcd->arg_0);


}

void Quentin::_objref_DirectoryViewer::freeTicket(::CORBA::Long ticket)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0d000000, "freeTicket", 11);
  _call_desc.arg_0 = ticket;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_1d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  tcd->result = impl->getFreeTickets();


}

::CORBA::Long Quentin::_objref_DirectoryViewer::getFreeTickets()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1d000000, "getFreeTickets", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _wvoid
class _0RL_cd_33742A71C73D0017_2d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_2d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 1, _user_exns, 0, upcall)
  {

  }




  static const char* const _user_exns[];


};

const char* const _0RL_cd_33742A71C73D0017_2d000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_3d000000(omniCallDescriptor*, omniServant* svnt)
{

  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
  impl->release();


}

void Quentin::_objref_DirectoryViewer::release()
{
  _0RL_cd_33742A71C73D0017_2d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3d000000, "release", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_cwstring_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_4d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_4d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_4d000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_33742A71C73D0017_4d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_33742A71C73D0017_4d000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_4d000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_4d000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_4d000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_5d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_4d000000* tcd = (_0RL_cd_33742A71C73D0017_4d000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->directQuery(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->directQuery(tcd->arg_0);
  else {
    try {
      tcd->result = impl->directQuery(tcd->arg_0);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_DirectoryViewer::directQuery(const ::CORBA::WChar* command)
{
  _0RL_cd_33742A71C73D0017_4d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5d000000, "directQuery", 12);
  _call_desc.arg_0 = command;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cwstring_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_6d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_6d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::WString_var result;
};

void _0RL_cd_33742A71C73D0017_6d000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalWString(result,0);

}

void _0RL_cd_33742A71C73D0017_6d000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalWString(0);

}

const char* const _0RL_cd_33742A71C73D0017_6d000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_6d000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_7d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_6d000000* tcd = (_0RL_cd_33742A71C73D0017_6d000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getServerTime();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getServerTime();
  else {
    try {
      tcd->result = impl->getServerTime();
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::WChar* Quentin::_objref_DirectoryViewer::getServerTime()
{
  _0RL_cd_33742A71C73D0017_6d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_7d000000, "getServerTime", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_cQuentin_mLongs_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_8d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_8d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_8d000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_8d000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_8d000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_8d000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_8d000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_8d000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_9d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_8d000000* tcd = (_0RL_cd_33742A71C73D0017_8d000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->queryFreed(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->queryFreed(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->queryFreed(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_DirectoryViewer::queryFreed(::CORBA::Long poolID, const ::Quentin::Longs& clips)
{
  _0RL_cd_33742A71C73D0017_8d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_9d000000, "queryFreed", 11);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = &(::Quentin::Longs&) clips;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_ad000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ad000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_ad000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_ad000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_ad000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_ad000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_ad000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_ad000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_bd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ad000000* tcd = (_0RL_cd_33742A71C73D0017_ad000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPools(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPools(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getPools(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_DirectoryViewer::getPools(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_ad000000 _call_desc(_0RL_lcfn_33742A71C73D0017_bd000000, "getPools", 9);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_cd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_68000000* tcd = (_0RL_cd_33742A71C73D0017_68000000*)cd;
  Quentin::_impl_DirectoryViewer* impl = (Quentin::_impl_DirectoryViewer*) svnt->_ptrToInterface(Quentin::DirectoryViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFreeProtons(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFreeProtons(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getFreeProtons(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::LongLong Quentin::_objref_DirectoryViewer::getFreeProtons(::CORBA::Long poolIdent)
{
  _0RL_cd_33742A71C73D0017_68000000 _call_desc(_0RL_lcfn_33742A71C73D0017_cd000000, "getFreeProtons", 15);
  _call_desc.arg_0 = poolIdent;

  _invoke(_call_desc);
  return _call_desc.result;


}
Quentin::_pof_DirectoryViewer::~_pof_DirectoryViewer() {}


omniObjRef*
Quentin::_pof_DirectoryViewer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_DirectoryViewer(ior, id);
}


::CORBA::Boolean
Quentin::_pof_DirectoryViewer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::DirectoryViewer::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, Quentin::Properties::_PD_repoId) )
    return 1;


  return 0;
}

const Quentin::_pof_DirectoryViewer _the_pof_Quentin_mDirectoryViewer;

Quentin::_impl_DirectoryViewer::~_impl_DirectoryViewer() {}


::CORBA::Boolean
Quentin::_impl_DirectoryViewer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getColumnDescriptions") ) {

    _0RL_cd_33742A71C73D0017_f8000000 _call_desc(_0RL_lcfn_33742A71C73D0017_09000000, "getColumnDescriptions", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setDatabase") ) {

    _0RL_cd_33742A71C73D0017_19000000 _call_desc(_0RL_lcfn_33742A71C73D0017_29000000, "setDatabase", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createClip") ) {

    _0RL_cd_33742A71C73D0017_39000000 _call_desc(_0RL_lcfn_33742A71C73D0017_49000000, "createClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createPlacedClip") ) {

    _0RL_cd_33742A71C73D0017_59000000 _call_desc(_0RL_lcfn_33742A71C73D0017_69000000, "createPlacedClip", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "findFragsOnPools") ) {

    _0RL_cd_33742A71C73D0017_79000000 _call_desc(_0RL_lcfn_33742A71C73D0017_89000000, "findFragsOnPools", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "findClipOnPools") ) {

    _0RL_cd_33742A71C73D0017_99000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a9000000, "findClipOnPools", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllFragments") ) {

    _0RL_cd_33742A71C73D0017_b9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c9000000, "getAllFragments", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFragments") ) {

    _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e9000000, "getFragments", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFragmentsWithMode") ) {

    _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0a000000, "getFragmentsWithMode", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTypeFragments") ) {

    _0RL_cd_33742A71C73D0017_1a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_2a000000, "getTypeFragments", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSubTypeFragments") ) {

    _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3a000000, "getSubTypeFragments", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTrackFragments") ) {

    _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_4a000000, "getTrackFragments", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSubTrackFragments") ) {

    _0RL_cd_33742A71C73D0017_5a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6a000000, "getSubTrackFragments", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSourceTimecode") ) {

    _0RL_cd_33742A71C73D0017_7a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8a000000, "getSourceTimecode", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getClipData") ) {

    _0RL_cd_33742A71C73D0017_9a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_aa000000, "getClipData", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "updateClip") ) {

    _0RL_cd_33742A71C73D0017_ba000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ca000000, "updateClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deleteClip") ) {

    _0RL_cd_33742A71C73D0017_da000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ea000000, "deleteClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "trimUnrecorded") ) {

    _0RL_cd_33742A71C73D0017_fa000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0b000000, "trimUnrecorded", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "numberClip") ) {

    _0RL_cd_33742A71C73D0017_1b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_2b000000, "numberClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "scanNumbers") ) {

    _0RL_cd_33742A71C73D0017_3b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_4b000000, "scanNumbers", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cloneClip") ) {

    _0RL_cd_33742A71C73D0017_5b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6b000000, "cloneClip", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cloneIfNeeded") ) {

    _0RL_cd_33742A71C73D0017_7b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8b000000, "cloneIfNeeded", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "replaceContent") ) {

    _0RL_cd_33742A71C73D0017_9b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ab000000, "replaceContent", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNumberedClip") ) {

    _0RL_cd_33742A71C73D0017_bb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_cb000000, "getNumberedClip", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setColumnSelection") ) {

    _0RL_cd_33742A71C73D0017_db000000 _call_desc(_0RL_lcfn_33742A71C73D0017_eb000000, "setColumnSelection", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getColumnSelection") ) {

    _0RL_cd_33742A71C73D0017_fb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0c000000, "getColumnSelection", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "maxSearchHits") ) {

    _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1c000000, "maxSearchHits", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "search") ) {

    _0RL_cd_33742A71C73D0017_2c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3c000000, "search", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSearchResults") ) {

    _0RL_cd_33742A71C73D0017_4c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5c000000, "getSearchResults", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveSearch") ) {

    _0RL_cd_33742A71C73D0017_66000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6c000000, "moveSearch", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSearchPos") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_7c000000, "getSearchPos", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "closeSearch") ) {

    _0RL_cd_33742A71C73D0017_80000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8c000000, "closeSearch", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTaggedClips") ) {

    _0RL_cd_33742A71C73D0017_9c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ac000000, "getTaggedClips", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getThumbnailSize") ) {

    _0RL_cd_33742A71C73D0017_83000000 _call_desc(_0RL_lcfn_33742A71C73D0017_bc000000, "getThumbnailSize", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requestThumbnails") ) {

    _0RL_cd_33742A71C73D0017_cc000000 _call_desc(_0RL_lcfn_33742A71C73D0017_dc000000, "requestThumbnails", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "abortThumbnails") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ec000000, "abortThumbnails", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTicket") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_fc000000, "getTicket", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "freeTicket") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_0d000000, "freeTicket", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFreeTickets") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1d000000, "getFreeTickets", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "release") ) {

    _0RL_cd_33742A71C73D0017_2d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3d000000, "release", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "directQuery") ) {

    _0RL_cd_33742A71C73D0017_4d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5d000000, "directQuery", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getServerTime") ) {

    _0RL_cd_33742A71C73D0017_6d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_7d000000, "getServerTime", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "queryFreed") ) {

    _0RL_cd_33742A71C73D0017_8d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_9d000000, "queryFreed", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPools") ) {

    _0RL_cd_33742A71C73D0017_ad000000 _call_desc(_0RL_lcfn_33742A71C73D0017_bd000000, "getPools", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFreeProtons") ) {

    _0RL_cd_33742A71C73D0017_68000000 _call_desc(_0RL_lcfn_33742A71C73D0017_cd000000, "getFreeProtons", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


#ifndef _MSC_VER
  if( _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Properties*)this)->
      _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
Quentin::_impl_DirectoryViewer::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::DirectoryViewer::_PD_repoId )
    return (::Quentin::_impl_DirectoryViewer*) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::_impl_Properties*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::DirectoryViewer::_PD_repoId) )
    return (::Quentin::_impl_DirectoryViewer*) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::_impl_Properties*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_DirectoryViewer::_mostDerivedRepoId()
{
  return ::Quentin::DirectoryViewer::_PD_repoId;
}

const ::CORBA::WChar * Quentin::ZonePortal::idlVersion = L"3-04-00";

const ::CORBA::Long Quentin::ZonePortal::copyNotDone _init_in_cldef_( = 1073741824 );

const ::CORBA::Long Quentin::ZonePortal::copyHasTicket _init_in_cldef_( = 536870912 );

const ::CORBA::Long Quentin::ZonePortal::copySourceDown _init_in_cldef_( = 268435456 );

const ::CORBA::Long Quentin::ZonePortal::copyDestDown _init_in_cldef_( = 134217728 );

const ::CORBA::Long Quentin::ZonePortal::copyFailed _init_in_cldef_( = 67108864 );

const ::CORBA::Long Quentin::ZonePortal::rushRecording _init_in_cldef_( = 1073741824 );

Quentin::ZonePortal_ptr Quentin::ZonePortal_Helper::_nil() {
  return ::Quentin::ZonePortal::_nil();
}

::CORBA::Boolean Quentin::ZonePortal_Helper::is_nil(::Quentin::ZonePortal_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quentin::ZonePortal_Helper::release(::Quentin::ZonePortal_ptr p) {
  ::CORBA::release(p);
}

void Quentin::ZonePortal_Helper::marshalObjRef(::Quentin::ZonePortal_ptr obj, cdrStream& s) {
  ::Quentin::ZonePortal::_marshalObjRef(obj, s);
}

Quentin::ZonePortal_ptr Quentin::ZonePortal_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quentin::ZonePortal::_unmarshalObjRef(s);
}

void Quentin::ZonePortal_Helper::duplicate(::Quentin::ZonePortal_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quentin::ZonePortal_ptr
Quentin::ZonePortal::_duplicate(::Quentin::ZonePortal_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quentin::ZonePortal_ptr
Quentin::ZonePortal::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quentin::ZonePortal_ptr
Quentin::ZonePortal::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quentin::ZonePortal_ptr
Quentin::ZonePortal::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ZonePortal _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ZonePortal* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ZonePortal;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quentin::ZonePortal::_PD_repoId = "IDL:Quentin/ZonePortal:1.0";


Quentin::_objref_ZonePortal::~_objref_ZonePortal() {

}


Quentin::_objref_ZonePortal::_objref_ZonePortal(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quentin::ZonePortal::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(Quentin::)_objref_Properties(ior, id)

{
  _PR_setobj(this);
}

void*
Quentin::_objref_ZonePortal::_ptrToObjRef(const char* id)
{
  if( id == ::Quentin::ZonePortal::_PD_repoId )
    return (::Quentin::ZonePortal_ptr) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::Properties_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quentin::ZonePortal::_PD_repoId) )
    return (::Quentin::ZonePortal_ptr) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::Properties_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_dd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->majorIDLVersion();


}

::CORBA::Long Quentin::_objref_ZonePortal::majorIDLVersion()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_dd000000, "majorIDLVersion", 16);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_cboolean
class _0RL_cd_33742A71C73D0017_ed000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ed000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Boolean arg_0;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_ed000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_33742A71C73D0017_ed000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

void _0RL_cd_33742A71C73D0017_ed000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_ed000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_ed000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_fd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ed000000* tcd = (_0RL_cd_33742A71C73D0017_ed000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getServers(tcd->arg_0);


}

Quentin::Longs* Quentin::_objref_ZonePortal::getServers(::CORBA::Boolean negateIfDown)
{
  _0RL_cd_33742A71C73D0017_ed000000 _call_desc(_0RL_lcfn_33742A71C73D0017_fd000000, "getServers", 11);
  _call_desc.arg_0 = negateIfDown;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mServer_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_0e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_0e000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Server_var result;
};

void _0RL_cd_33742A71C73D0017_0e000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_0e000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_0e000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::Server_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_0e000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::Server_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_0e000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_0e000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_1e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_0e000000* tcd = (_0RL_cd_33742A71C73D0017_0e000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getServer(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getServer(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getServer(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Server_ptr Quentin::_objref_ZonePortal::getServer(::CORBA::Long serverID)
{
  _0RL_cd_33742A71C73D0017_0e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1e000000, "getServer", 10);
  _call_desc.arg_0 = serverID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_2e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_55000000* tcd = (_0RL_cd_33742A71C73D0017_55000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getPools();


}

Quentin::Longs* Quentin::_objref_ZonePortal::getPools()
{
  _0RL_cd_33742A71C73D0017_55000000 _call_desc(_0RL_lcfn_33742A71C73D0017_2e000000, "getPools", 9);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _clonglong_i_clong_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_3e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_3e000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::LongLong result;
};

void _0RL_cd_33742A71C73D0017_3e000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_3e000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_3e000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_3e000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::LongLong&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_3e000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_3e000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_4e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_3e000000* tcd = (_0RL_cd_33742A71C73D0017_3e000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPoolSpace(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPoolSpace(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getPoolSpace(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::LongLong Quentin::_objref_ZonePortal::getPoolSpace(::CORBA::Long mode, ::CORBA::Long poolID)
{
  _0RL_cd_33742A71C73D0017_3e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_4e000000, "getPoolSpace", 13);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = poolID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_5e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_0e000000* tcd = (_0RL_cd_33742A71C73D0017_0e000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPoolServer(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPoolServer(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getPoolServer(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Server_ptr Quentin::_objref_ZonePortal::getPoolServer(::CORBA::Long poolID)
{
  _0RL_cd_33742A71C73D0017_0e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5e000000, "getPoolServer", 14);
  _call_desc.arg_0 = poolID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_6e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_3e000000* tcd = (_0RL_cd_33742A71C73D0017_3e000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getServerSpace(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getServerSpace(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getServerSpace(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::LongLong Quentin::_objref_ZonePortal::getServerSpace(::CORBA::Long mode, ::CORBA::Long serverID)
{
  _0RL_cd_33742A71C73D0017_3e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6e000000, "getServerSpace", 15);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = serverID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPoolInfo_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_7e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_7e000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::PoolInfo_var result;
};

void _0RL_cd_33742A71C73D0017_7e000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_7e000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_7e000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::PoolInfo&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_7e000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::PoolInfo;
  (Quentin::PoolInfo&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_7e000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_7e000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_8e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_7e000000* tcd = (_0RL_cd_33742A71C73D0017_7e000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPoolInfo(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPoolInfo(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getPoolInfo(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::PoolInfo* Quentin::_objref_ZonePortal::getPoolInfo(::CORBA::Long poolID)
{
  _0RL_cd_33742A71C73D0017_7e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8e000000, "getPoolInfo", 12);
  _call_desc.arg_0 = poolID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_9e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_44000000* tcd = (_0RL_cd_33742A71C73D0017_44000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getDirViewer(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getDirViewer(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getDirViewer(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::DirectoryViewer_ptr Quentin::_objref_ZonePortal::getDirViewer(::CORBA::Long timeoutSecs, const ::CORBA::WChar* viewerName)
{
  _0RL_cd_33742A71C73D0017_44000000 _call_desc(_0RL_lcfn_33742A71C73D0017_9e000000, "getDirViewer", 13);
  _call_desc.arg_0 = timeoutSecs;
  _call_desc.arg_1 = viewerName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mDirectoryViewer_i_clong_i_clong_i_cwstring_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_ae000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ae000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::WString_var arg_2_;
  const ::CORBA::WChar* arg_2;
  Quentin::DirectoryViewer_var result;
};

void _0RL_cd_33742A71C73D0017_ae000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_33742A71C73D0017_ae000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_33742A71C73D0017_ae000000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::DirectoryViewer_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_ae000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::DirectoryViewer_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_ae000000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_ae000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_be000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ae000000* tcd = (_0RL_cd_33742A71C73D0017_ae000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPoolDirViewer(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPoolDirViewer(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getPoolDirViewer(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::DirectoryViewer_ptr Quentin::_objref_ZonePortal::getPoolDirViewer(::CORBA::Long poolID, ::CORBA::Long timeoutSecs, const ::CORBA::WChar* viewerName)
{
  _0RL_cd_33742A71C73D0017_ae000000 _call_desc(_0RL_lcfn_33742A71C73D0017_be000000, "getPoolDirViewer", 17);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = timeoutSecs;
  _call_desc.arg_2 = viewerName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cQuentin_mStateChangeListener_i_clong
class _0RL_cd_33742A71C73D0017_ce000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ce000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::StateChangeListener_var arg_0_;
  Quentin::StateChangeListener_ptr arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_ce000000::marshalArguments(cdrStream& _n)
{
  Quentin::StateChangeListener::_marshalObjRef(arg_0,_n);
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_ce000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Quentin::StateChangeListener::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_ce000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_ce000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_ce000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_de000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ce000000* tcd = (_0RL_cd_33742A71C73D0017_ce000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->addStateChangeListener(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean Quentin::_objref_ZonePortal::addStateChangeListener(::Quentin::StateChangeListener_ptr listener, ::CORBA::Long flags)
{
  _0RL_cd_33742A71C73D0017_ce000000 _call_desc(_0RL_lcfn_33742A71C73D0017_de000000, "addStateChangeListener", 23);
  _call_desc.arg_0 = listener;
  _call_desc.arg_1 = flags;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cwstring_i_cQuentin_mStateChangeListener_i_clong_i_clong
class _0RL_cd_33742A71C73D0017_ee000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ee000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  Quentin::StateChangeListener_var arg_1_;
  Quentin::StateChangeListener_ptr arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_ee000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  Quentin::StateChangeListener::_marshalObjRef(arg_1,_n);
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_ee000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = Quentin::StateChangeListener::_unmarshalObjRef(_n);
  arg_1 = arg_1_.in();
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_ee000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_ee000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_ee000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_fe000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ee000000* tcd = (_0RL_cd_33742A71C73D0017_ee000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->addNamedStateChangeListener(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

::CORBA::Boolean Quentin::_objref_ZonePortal::addNamedStateChangeListener(const ::CORBA::WChar* listenerName, ::Quentin::StateChangeListener_ptr listener, ::CORBA::Long flags, ::CORBA::Long interval)
{
  _0RL_cd_33742A71C73D0017_ee000000 _call_desc(_0RL_lcfn_33742A71C73D0017_fe000000, "addNamedStateChangeListener", 28);
  _call_desc.arg_0 = listenerName;
  _call_desc.arg_1 = listener;
  _call_desc.arg_2 = flags;
  _call_desc.arg_3 = interval;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cQuentin_mStateChangeListener
class _0RL_cd_33742A71C73D0017_0f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_0f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::StateChangeListener_var arg_0_;
  Quentin::StateChangeListener_ptr arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_0f000000::marshalArguments(cdrStream& _n)
{
  Quentin::StateChangeListener::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_33742A71C73D0017_0f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Quentin::StateChangeListener::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_33742A71C73D0017_0f000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_0f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_0f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_1f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_0f000000* tcd = (_0RL_cd_33742A71C73D0017_0f000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->removeStateChangeListener(tcd->arg_0);


}

::CORBA::Boolean Quentin::_objref_ZonePortal::removeStateChangeListener(::Quentin::StateChangeListener_ptr listener)
{
  _0RL_cd_33742A71C73D0017_0f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1f000000, "removeStateChangeListener", 26);
  _call_desc.arg_0 = listener;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mStateChangeList_i_clong
class _0RL_cd_33742A71C73D0017_2f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_2f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::StateChangeList_var result;
};

void _0RL_cd_33742A71C73D0017_2f000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_2f000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_2f000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::StateChangeList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_2f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::StateChangeList;
  (Quentin::StateChangeList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_2f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_3f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_2f000000* tcd = (_0RL_cd_33742A71C73D0017_2f000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getStateChanges(tcd->arg_0);


}

Quentin::StateChangeList* Quentin::_objref_ZonePortal::getStateChanges(::CORBA::Long changeNum)
{
  _0RL_cd_33742A71C73D0017_2f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3f000000, "getStateChanges", 16);
  _call_desc.arg_0 = changeNum;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mCopyProgress_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_4f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_4f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::CopyProgress result;
};

void _0RL_cd_33742A71C73D0017_4f000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_4f000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_4f000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::CopyProgress&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_4f000000::unmarshalReturnedValues(cdrStream& _n)
{
  (Quentin::CopyProgress&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_4f000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_4f000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_5f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_4f000000* tcd = (_0RL_cd_33742A71C73D0017_4f000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getCopyRemaining(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getCopyRemaining(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getCopyRemaining(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::CopyProgress Quentin::_objref_ZonePortal::getCopyRemaining(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_4f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5f000000, "getCopyRemaining", 17);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mCopyProgressList
class _0RL_cd_33742A71C73D0017_6f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_6f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  static const char* const _user_exns[];

  Quentin::CopyProgressList_var result;
};

void _0RL_cd_33742A71C73D0017_6f000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::CopyProgressList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_6f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::CopyProgressList;
  (Quentin::CopyProgressList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_6f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_7f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_6f000000* tcd = (_0RL_cd_33742A71C73D0017_6f000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getCopiesRemaining();


}

Quentin::CopyProgressList* Quentin::_objref_ZonePortal::getCopiesRemaining()
{
  _0RL_cd_33742A71C73D0017_6f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_7f000000, "getCopiesRemaining", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mCopyMapList_i_clong_i_cQuentin_mFragmentType_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_8f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_8f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::FragmentType arg_1;
  ::CORBA::Long arg_2;
  Quentin::CopyMapList_var result;
};

void _0RL_cd_33742A71C73D0017_8f000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_8f000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (Quentin::FragmentType&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_8f000000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::CopyMapList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_8f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::CopyMapList;
  (Quentin::CopyMapList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_8f000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_8f000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_9f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_8f000000* tcd = (_0RL_cd_33742A71C73D0017_8f000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getCopyMap(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getCopyMap(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getCopyMap(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::CopyMapList* Quentin::_objref_ZonePortal::getCopyMap(::CORBA::Long clipID, ::Quentin::FragmentType type, ::CORBA::Long track)
{
  _0RL_cd_33742A71C73D0017_8f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_9f000000, "getCopyMap", 11);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = type;
  _call_desc.arg_2 = track;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_af000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_da000000* tcd = (_0RL_cd_33742A71C73D0017_da000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->deleteCopy(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->deleteCopy(tcd->arg_0);
  else {
    try {
      tcd->result = impl->deleteCopy(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_ZonePortal::deleteCopy(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_da000000 _call_desc(_0RL_lcfn_33742A71C73D0017_af000000, "deleteCopy", 11);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_bf000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f4000000* tcd = (_0RL_cd_33742A71C73D0017_f4000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->ticketCopy(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->ticketCopy(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->ticketCopy(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_ZonePortal::ticketCopy(::CORBA::Long clipID, ::CORBA::Long ticket)
{
  _0RL_cd_33742A71C73D0017_f4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_bf000000, "ticketCopy", 11);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = ticket;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_cf000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_cf000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_33742A71C73D0017_cf000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_cf000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_cf000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_33742A71C73D0017_cf000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_33742A71C73D0017_cf000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_cf000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_df000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_cf000000* tcd = (_0RL_cd_33742A71C73D0017_cf000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->tryToTicketCopy(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->tryToTicketCopy(tcd->arg_0);
  else {
    try {
      tcd->result = impl->tryToTicketCopy(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_ZonePortal::tryToTicketCopy(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_cf000000 _call_desc(_0RL_lcfn_33742A71C73D0017_df000000, "tryToTicketCopy", 16);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_ef000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_ef000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
};

void _0RL_cd_33742A71C73D0017_ef000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_ef000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_ef000000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_ef000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_ff000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ef000000* tcd = (_0RL_cd_33742A71C73D0017_ef000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unticketCopy(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unticketCopy(tcd->arg_0);
  else {
    try {
      impl->unticketCopy(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::unticketCopy(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_ef000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ff000000, "unticketCopy", 13);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mRushTag_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_00100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_00100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::RushTag_var arg_0_;
  const Quentin::RushTag* arg_0;
};

void _0RL_cd_33742A71C73D0017_00100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::RushTag&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_00100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::RushTag;
  (Quentin::RushTag&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_33742A71C73D0017_00100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_00100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_10100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_00100000* tcd = (_0RL_cd_33742A71C73D0017_00100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->addTag(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->addTag(*tcd->arg_0);
  else {
    try {
      impl->addTag(*tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::addTag(const ::Quentin::RushTag& tagToAdd)
{
  _0RL_cd_33742A71C73D0017_00100000 _call_desc(_0RL_lcfn_33742A71C73D0017_10100000, "addTag", 7);
  _call_desc.arg_0 = &(::Quentin::RushTag&) tagToAdd;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_20100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_00100000* tcd = (_0RL_cd_33742A71C73D0017_00100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->removeTag(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->removeTag(*tcd->arg_0);
  else {
    try {
      impl->removeTag(*tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::removeTag(const ::Quentin::RushTag& tagToRemove)
{
  _0RL_cd_33742A71C73D0017_00100000 _call_desc(_0RL_lcfn_33742A71C73D0017_20100000, "removeTag", 10);
  _call_desc.arg_0 = &(::Quentin::RushTag&) tagToRemove;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mRushTagList_i_cQuentin_mRushIdent_i_cQuentin_mWStrings_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_30100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_30100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::RushIdent arg_0_;
  const Quentin::RushIdent* arg_0;
  Quentin::WStrings_var arg_1_;
  const Quentin::WStrings* arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  Quentin::RushTagList_var result;
};

void _0RL_cd_33742A71C73D0017_30100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::RushIdent&) *arg_0 >>= _n;
  (const Quentin::WStrings&) *arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_30100000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::RushIdent&)arg_0_ <<= _n;
  arg_0 = &arg_0_;
  arg_1_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_30100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::RushTagList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_30100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::RushTagList;
  (Quentin::RushTagList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_30100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_30100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_40100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_30100000* tcd = (_0RL_cd_33742A71C73D0017_30100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTags(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTags(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->getTags(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::RushTagList* Quentin::_objref_ZonePortal::getTags(const ::Quentin::RushIdent& rushID, const ::Quentin::WStrings& tagsWanted, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_30100000 _call_desc(_0RL_lcfn_33742A71C73D0017_40100000, "getTags", 8);
  _call_desc.arg_0 = &(::Quentin::RushIdent&) rushID;
  _call_desc.arg_1 = &(::Quentin::WStrings&) tagsWanted;
  _call_desc.arg_2 = start;
  _call_desc.arg_3 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mRushTimecodeList_i_cQuentin_mRushIdent_i_clong_i_clong_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_50100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_50100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::RushIdent arg_0_;
  const Quentin::RushIdent* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  Quentin::RushTimecodeList_var result;
};

void _0RL_cd_33742A71C73D0017_50100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::RushIdent&) *arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_50100000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::RushIdent&)arg_0_ <<= _n;
  arg_0 = &arg_0_;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_50100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::RushTimecodeList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_50100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::RushTimecodeList;
  (Quentin::RushTimecodeList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_50100000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_50100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_60100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_50100000* tcd = (_0RL_cd_33742A71C73D0017_50100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTimecodes(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTimecodes(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getTimecodes(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::RushTimecodeList* Quentin::_objref_ZonePortal::getTimecodes(const ::Quentin::RushIdent& rushID, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_50100000 _call_desc(_0RL_lcfn_33742A71C73D0017_60100000, "getTimecodes", 13);
  _call_desc.arg_0 = &(::Quentin::RushIdent&) rushID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_70100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e1000000* tcd = (_0RL_cd_33742A71C73D0017_e1000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  impl->refresh(tcd->arg_0, tcd->arg_1);


}

void Quentin::_objref_ZonePortal::refresh(::CORBA::Long mode, ::CORBA::Long param)
{
  _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_70100000, "refresh", 8);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = param;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_80100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f8000000* tcd = (_0RL_cd_33742A71C73D0017_f8000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getColumnDescriptions();


}

Quentin::ColumnDescList* Quentin::_objref_ZonePortal::getColumnDescriptions()
{
  _0RL_cd_33742A71C73D0017_f8000000 _call_desc(_0RL_lcfn_33742A71C73D0017_80100000, "getColumnDescriptions", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_90100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_39000000* tcd = (_0RL_cd_33742A71C73D0017_39000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createClip(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createClip(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->createClip(*tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::createClip(const ::Quentin::ClipPropertyList& props, const ::Quentin::ServerFragments& frags)
{
  _0RL_cd_33742A71C73D0017_39000000 _call_desc(_0RL_lcfn_33742A71C73D0017_90100000, "createClip", 11);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) frags;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mClipPropertyList_i_cQuentin_mServerFragments_i_clong_i_clong_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace
class _0RL_cd_33742A71C73D0017_a0100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a0100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 5, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_a0100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_a0100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

void _0RL_cd_33742A71C73D0017_a0100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_a0100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_a0100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_a0100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a0100000* tcd = (_0RL_cd_33742A71C73D0017_a0100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createPlacedClip(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createPlacedClip(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      tcd->result = impl->createPlacedClip(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::createPlacedClip(const ::Quentin::ClipPropertyList& props, const ::Quentin::ServerFragments& frags, ::CORBA::Long poolIdent, ::CORBA::Long ticket, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_a0100000 _call_desc(_0RL_lcfn_33742A71C73D0017_b0100000, "createPlacedClip", 17);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) frags;
  _call_desc.arg_2 = poolIdent;
  _call_desc.arg_3 = ticket;
  _call_desc.arg_4 = priority;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_79000000* tcd = (_0RL_cd_33742A71C73D0017_79000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->findFragsOnPools(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->findFragsOnPools(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->findFragsOnPools(*tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_ZonePortal::findFragsOnPools(const ::Quentin::ServerFragments& frags, const ::Quentin::Longs& pools)
{
  _0RL_cd_33742A71C73D0017_79000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c0100000, "findFragsOnPools", 17);
  _call_desc.arg_0 = &(::Quentin::ServerFragments&) frags;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_99000000* tcd = (_0RL_cd_33742A71C73D0017_99000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->findClipOnPools(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->findClipOnPools(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->findClipOnPools(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_ZonePortal::findClipOnPools(::CORBA::Long clipID, const ::Quentin::Longs& pools)
{
  _0RL_cd_33742A71C73D0017_99000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d0100000, "findClipOnPools", 16);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b9000000* tcd = (_0RL_cd_33742A71C73D0017_b9000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getAllFragments(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getAllFragments(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getAllFragments(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getAllFragments(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_b9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e0100000, "getAllFragments", 16);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d9000000* tcd = (_0RL_cd_33742A71C73D0017_d9000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getFragments(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f0100000, "getFragments", 13);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_01100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f9000000* tcd = (_0RL_cd_33742A71C73D0017_f9000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFragmentsWithMode(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFragmentsWithMode(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->getFragmentsWithMode(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getFragmentsWithMode(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish, ::CORBA::Long playMode)
{
  _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_01100000, "getFragmentsWithMode", 21);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;
  _call_desc.arg_3 = playMode;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_11100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_1a000000* tcd = (_0RL_cd_33742A71C73D0017_1a000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTypeFragments(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTypeFragments(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getTypeFragments(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getTypeFragments(::CORBA::Long clipID, ::CORBA::Long trackType)
{
  _0RL_cd_33742A71C73D0017_1a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_11100000, "getTypeFragments", 17);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_21100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f9000000* tcd = (_0RL_cd_33742A71C73D0017_f9000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSubTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSubTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->getSubTypeFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getSubTypeFragments(::CORBA::Long clipID, ::CORBA::Long trackType, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_21100000, "getSubTypeFragments", 20);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;
  _call_desc.arg_2 = start;
  _call_desc.arg_3 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_31100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d9000000* tcd = (_0RL_cd_33742A71C73D0017_d9000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getTrackFragments(::CORBA::Long clipID, ::CORBA::Long trackType, ::CORBA::Long trackNum)
{
  _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_31100000, "getTrackFragments", 18);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;
  _call_desc.arg_2 = trackNum;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_41100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_5a000000* tcd = (_0RL_cd_33742A71C73D0017_5a000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSubTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSubTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      tcd->result = impl->getSubTrackFragments(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getSubTrackFragments(::CORBA::Long clipID, ::CORBA::Long trackType, ::CORBA::Long trackNum, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_5a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_41100000, "getSubTrackFragments", 21);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = trackType;
  _call_desc.arg_2 = trackNum;
  _call_desc.arg_3 = start;
  _call_desc.arg_4 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_51100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_7a000000* tcd = (_0RL_cd_33742A71C73D0017_7a000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSourceTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSourceTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getSourceTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getSourceTimecode(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_7a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_51100000, "getSourceTimecode", 18);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_61100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_7a000000* tcd = (_0RL_cd_33742A71C73D0017_7a000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getRefTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getRefTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->getRefTimecode(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ServerFragments* Quentin::_objref_ZonePortal::getRefTimecode(::CORBA::Long clipID, ::CORBA::Long start, ::CORBA::Long finish)
{
  _0RL_cd_33742A71C73D0017_7a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_61100000, "getRefTimecode", 15);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = start;
  _call_desc.arg_2 = finish;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_71100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_9a000000* tcd = (_0RL_cd_33742A71C73D0017_9a000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getClipData(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getClipData(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->getClipData(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::getClipData(::CORBA::Long clipID, const ::Quentin::WStrings& colsWanted)
{
  _0RL_cd_33742A71C73D0017_9a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_71100000, "getClipData", 12);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::WStrings&) colsWanted;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_81100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ba000000* tcd = (_0RL_cd_33742A71C73D0017_ba000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->updateClip(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->updateClip(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->updateClip(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::updateClip(::CORBA::Long clipID, const ::Quentin::ClipPropertyList& newColumns)
{
  _0RL_cd_33742A71C73D0017_ba000000 _call_desc(_0RL_lcfn_33742A71C73D0017_81100000, "updateClip", 11);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::ClipPropertyList&) newColumns;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_cwstring_i_cQuentin_mProtectMode_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_91100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_91100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::WString_var arg_1_;
  const ::CORBA::WChar* arg_1;
  Quentin::ProtectMode arg_2;
};

void _0RL_cd_33742A71C73D0017_91100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_91100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  (Quentin::ProtectMode&)arg_2 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_91100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_91100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_91100000* tcd = (_0RL_cd_33742A71C73D0017_91100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setClipProtection(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->setClipProtection(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->setClipProtection(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::setClipProtection(::CORBA::Long clipID, const ::CORBA::WChar* userID, ::Quentin::ProtectMode mode)
{
  _0RL_cd_33742A71C73D0017_91100000 _call_desc(_0RL_lcfn_33742A71C73D0017_a1100000, "setClipProtection", 18);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = userID;
  _call_desc.arg_2 = mode;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_da000000* tcd = (_0RL_cd_33742A71C73D0017_da000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->deleteClip(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->deleteClip(tcd->arg_0);
  else {
    try {
      tcd->result = impl->deleteClip(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_ZonePortal::deleteClip(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_da000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b1100000, "deleteClip", 11);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_fa000000* tcd = (_0RL_cd_33742A71C73D0017_fa000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->trimUnrecorded(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->trimUnrecorded(tcd->arg_0);
  else {
    try {
      tcd->result = impl->trimUnrecorded(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::trimUnrecorded(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_fa000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c1100000, "trimUnrecorded", 15);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_1b000000* tcd = (_0RL_cd_33742A71C73D0017_1b000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->numberClip(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->numberClip(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->numberClip(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::numberClip(::CORBA::Long clipID, ::CORBA::Long number, ::Quentin::ConflictMode confMode)
{
  _0RL_cd_33742A71C73D0017_1b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d1100000, "numberClip", 11);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = number;
  _call_desc.arg_2 = confMode;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_3b000000* tcd = (_0RL_cd_33742A71C73D0017_3b000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->scanNumbers(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->scanNumbers(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->scanNumbers(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::scanNumbers(::CORBA::Long poolID, ::CORBA::Long number, ::Quentin::FindMode mode)
{
  _0RL_cd_33742A71C73D0017_3b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e1100000, "scanNumbers", 12);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = number;
  _call_desc.arg_2 = mode;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_5b000000* tcd = (_0RL_cd_33742A71C73D0017_5b000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->cloneClip(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->cloneClip(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->cloneClip(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::cloneClip(::CORBA::Long clipID, ::CORBA::Long poolIdent, ::CORBA::Long ticket, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_5b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f1100000, "cloneClip", 10);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = poolIdent;
  _call_desc.arg_2 = ticket;
  _call_desc.arg_3 = priority;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_clong_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_02100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_02100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 5, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_02100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_02100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_02100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_02100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_02100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_02100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_12100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_02100000* tcd = (_0RL_cd_33742A71C73D0017_02100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->cloneClipInterZone(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->cloneClipInterZone(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->cloneClipInterZone(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::cloneClipInterZone(::CORBA::Long zoneID, ::CORBA::Long clipID, ::CORBA::Long poolID, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_02100000 _call_desc(_0RL_lcfn_33742A71C73D0017_12100000, "cloneClipInterZone", 19);
  _call_desc.arg_0 = zoneID;
  _call_desc.arg_1 = clipID;
  _call_desc.arg_2 = poolID;
  _call_desc.arg_3 = priority;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_22100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_02100000* tcd = (_0RL_cd_33742A71C73D0017_02100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->cloneClipInterZoneWithoutHistory(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->cloneClipInterZoneWithoutHistory(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->cloneClipInterZoneWithoutHistory(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::cloneClipInterZoneWithoutHistory(::CORBA::Long zoneID, ::CORBA::Long clipID, ::CORBA::Long poolID, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_02100000 _call_desc(_0RL_lcfn_33742A71C73D0017_22100000, "cloneClipInterZoneWithoutHistory", 33);
  _call_desc.arg_0 = zoneID;
  _call_desc.arg_1 = clipID;
  _call_desc.arg_2 = poolID;
  _call_desc.arg_3 = priority;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_32100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_7b000000* tcd = (_0RL_cd_33742A71C73D0017_7b000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->cloneIfNeeded(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5);
#else
  if (!cd->is_upcall())
    tcd->result = impl->cloneIfNeeded(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5);
  else {
    try {
      tcd->result = impl->cloneIfNeeded(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::cloneIfNeeded(::CORBA::Long clipID, ::CORBA::Long poolIdent, ::CORBA::Long ticket, ::CORBA::Long priority, ::CORBA::Long expirySecs, ::CORBA::Boolean& copyCreated)
{
  _0RL_cd_33742A71C73D0017_7b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_32100000, "cloneIfNeeded", 14);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = poolIdent;
  _call_desc.arg_2 = ticket;
  _call_desc.arg_3 = priority;
  _call_desc.arg_4 = expirySecs;

  _invoke(_call_desc);
  copyCreated = _call_desc.arg_5;
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_42100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_9b000000* tcd = (_0RL_cd_33742A71C73D0017_9b000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->replaceContent(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->replaceContent(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
  else {
    try {
      impl->replaceContent(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::replaceContent(::CORBA::Long clipID, ::CORBA::Long contentType, const ::Quentin::ServerFragments& frags)
{
  _0RL_cd_33742A71C73D0017_9b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_42100000, "replaceContent", 15);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = contentType;
  _call_desc.arg_2 = &(::Quentin::ServerFragments&) frags;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mFullClipIDList_i_cQuentin_mClipPropertyList_i_cQuentin_mLongs_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_52100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_52100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
  Quentin::FullClipIDList_var result;
};

void _0RL_cd_33742A71C73D0017_52100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_52100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_52100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::FullClipIDList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_52100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::FullClipIDList;
  (Quentin::FullClipIDList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_52100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_52100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_62100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_52100000* tcd = (_0RL_cd_33742A71C73D0017_52100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createPlaceholder(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createPlaceholder(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->createPlaceholder(*tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::FullClipIDList* Quentin::_objref_ZonePortal::createPlaceholder(const ::Quentin::ClipPropertyList& props, const ::Quentin::Longs& pools)
{
  _0RL_cd_33742A71C73D0017_52100000 _call_desc(_0RL_lcfn_33742A71C73D0017_62100000, "createPlaceholder", 18);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mFullClipIDList_i_clong_i_cQuentin_mLongs_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_72100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_72100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
  Quentin::FullClipIDList_var result;
};

void _0RL_cd_33742A71C73D0017_72100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_72100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_72100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::FullClipIDList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_72100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::FullClipIDList;
  (Quentin::FullClipIDList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_72100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_72100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_82100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_72100000* tcd = (_0RL_cd_33742A71C73D0017_72100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->clonePlaceholder(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->clonePlaceholder(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->clonePlaceholder(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::FullClipIDList* Quentin::_objref_ZonePortal::clonePlaceholder(::CORBA::Long clipID, const ::Quentin::Longs& pools)
{
  _0RL_cd_33742A71C73D0017_72100000 _call_desc(_0RL_lcfn_33742A71C73D0017_82100000, "clonePlaceholder", 17);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mFullClipIDList_i_cQuentin_mClipPropertyList_i_cQuentin_mLongs_i_cQuentin_mWStrings_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_92100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_92100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::Longs_var arg_1_;
  const Quentin::Longs* arg_1;
  Quentin::WStrings_var arg_2_;
  const Quentin::WStrings* arg_2;
  Quentin::FullClipIDList_var result;
};

void _0RL_cd_33742A71C73D0017_92100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::Longs&) *arg_1 >>= _n;
  (const Quentin::WStrings&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_92100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::Longs;
  (Quentin::Longs&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_33742A71C73D0017_92100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::FullClipIDList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_92100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::FullClipIDList;
  (Quentin::FullClipIDList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_92100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_92100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a2100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_92100000* tcd = (_0RL_cd_33742A71C73D0017_92100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createExtPlaceholder(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createExtPlaceholder(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
  else {
    try {
      tcd->result = impl->createExtPlaceholder(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::FullClipIDList* Quentin::_objref_ZonePortal::createExtPlaceholder(const ::Quentin::ClipPropertyList& props, const ::Quentin::Longs& pools, const ::Quentin::WStrings& extData)
{
  _0RL_cd_33742A71C73D0017_92100000 _call_desc(_0RL_lcfn_33742A71C73D0017_a2100000, "createExtPlaceholder", 21);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::Longs&) pools;
  _call_desc.arg_2 = &(::Quentin::WStrings&) extData;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mLongs_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_b2100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_b2100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::Longs_var result;
};

void _0RL_cd_33742A71C73D0017_b2100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_b2100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_b2100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::Longs&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_b2100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::Longs;
  (Quentin::Longs&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_b2100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_b2100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c2100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b2100000* tcd = (_0RL_cd_33742A71C73D0017_b2100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPlaceholderPools(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPlaceholderPools(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getPlaceholderPools(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_ZonePortal::getPlaceholderPools(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_b2100000 _call_desc(_0RL_lcfn_33742A71C73D0017_c2100000, "getPlaceholderPools", 20);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mPlaceholderDataList_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_d2100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d2100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::PlaceholderDataList_var result;
};

void _0RL_cd_33742A71C73D0017_d2100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_d2100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_d2100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::PlaceholderDataList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_d2100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::PlaceholderDataList;
  (Quentin::PlaceholderDataList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_d2100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_d2100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e2100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d2100000* tcd = (_0RL_cd_33742A71C73D0017_d2100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPlaceholderData(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPlaceholderData(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getPlaceholderData(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::PlaceholderDataList* Quentin::_objref_ZonePortal::getPlaceholderData(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_d2100000 _call_desc(_0RL_lcfn_33742A71C73D0017_e2100000, "getPlaceholderData", 19);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mFullClipIDList_i_clong_i_cQuentin_mServerFragments_i_cQuentin_mClipPropertyList_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_f2100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_f2100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 6, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
  Quentin::ClipPropertyList_var arg_2_;
  const Quentin::ClipPropertyList* arg_2;
  ::CORBA::Long arg_3;
  Quentin::FullClipIDList_var result;
};

void _0RL_cd_33742A71C73D0017_f2100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;
  (const Quentin::ClipPropertyList&) *arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_f2100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_f2100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::FullClipIDList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_f2100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::FullClipIDList;
  (Quentin::FullClipIDList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_f2100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_f2100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_03100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f2100000* tcd = (_0RL_cd_33742A71C73D0017_f2100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->fillPlaceholder(tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->fillPlaceholder(tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->fillPlaceholder(tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::FullClipIDList* Quentin::_objref_ZonePortal::fillPlaceholder(::CORBA::Long clipID, const ::Quentin::ServerFragments& frags, const ::Quentin::ClipPropertyList& props, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_f2100000 _call_desc(_0RL_lcfn_33742A71C73D0017_03100000, "fillPlaceholder", 16);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) frags;
  _call_desc.arg_2 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_3 = priority;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cQuentin_mPlaceholderData_i_cQuentin_mServerFragments_i_cQuentin_mClipPropertyList_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments_e_cQuentin_mNoSpace_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_13100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_13100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 6, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::PlaceholderData_var arg_0_;
  const Quentin::PlaceholderData* arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
  Quentin::ClipPropertyList_var arg_2_;
  const Quentin::ClipPropertyList* arg_2;
  ::CORBA::Long arg_3;
};

void _0RL_cd_33742A71C73D0017_13100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::PlaceholderData&) *arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;
  (const Quentin::ClipPropertyList&) *arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_13100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::PlaceholderData;
  (Quentin::PlaceholderData&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();
  (::CORBA::Long&)arg_3 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_13100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId,
  Quentin::NoSpace::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_13100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::NoSpace::_PD_repoId) ) {
    Quentin::NoSpace _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_23100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_13100000* tcd = (_0RL_cd_33742A71C73D0017_13100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->fillSinglePlaceholder(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    impl->fillSinglePlaceholder(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);
  else {
    try {
      impl->fillSinglePlaceholder(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::NoSpace& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::fillSinglePlaceholder(const ::Quentin::PlaceholderData& data, const ::Quentin::ServerFragments& frags, const ::Quentin::ClipPropertyList& props, ::CORBA::Long priority)
{
  _0RL_cd_33742A71C73D0017_13100000 _call_desc(_0RL_lcfn_33742A71C73D0017_23100000, "fillSinglePlaceholder", 22);
  _call_desc.arg_0 = &(::Quentin::PlaceholderData&) data;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) frags;
  _call_desc.arg_2 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_3 = priority;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mRushIdent_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_33100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_33100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::RushIdent arg_0_;
  const Quentin::RushIdent* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_33100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::RushIdent&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_33100000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::RushIdent&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

void _0RL_cd_33742A71C73D0017_33100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_33100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_33100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_33100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_43100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_33100000* tcd = (_0RL_cd_33742A71C73D0017_33100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->rushHighWater(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->rushHighWater(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->rushHighWater(*tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::rushHighWater(const ::Quentin::RushIdent& rushID)
{
  _0RL_cd_33742A71C73D0017_33100000 _call_desc(_0RL_lcfn_33742A71C73D0017_43100000, "rushHighWater", 14);
  _call_desc.arg_0 = &(::Quentin::RushIdent&) rushID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_i_cQuentin_mClipPropertyList_e_cQuentin_mBadColumnData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments
class _0RL_cd_33742A71C73D0017_53100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_53100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::ClipPropertyList_var arg_2_;
  const Quentin::ClipPropertyList* arg_2;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_53100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  (const Quentin::ClipPropertyList&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_53100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_33742A71C73D0017_53100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_53100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_53100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_53100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_63100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_53100000* tcd = (_0RL_cd_33742A71C73D0017_53100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createDeltaFromClips(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createDeltaFromClips(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
  else {
    try {
      tcd->result = impl->createDeltaFromClips(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::createDeltaFromClips(::CORBA::Long originalClipID, ::CORBA::Long laterClipID, const ::Quentin::ClipPropertyList& props)
{
  _0RL_cd_33742A71C73D0017_53100000 _call_desc(_0RL_lcfn_33742A71C73D0017_63100000, "createDeltaFromClips", 21);
  _call_desc.arg_0 = originalClipID;
  _call_desc.arg_1 = laterClipID;
  _call_desc.arg_2 = &(::Quentin::ClipPropertyList&) props;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mServerFragments_i_cQuentin_mServerFragments_i_cQuentin_mClipPropertyList_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError_e_cQuentin_mInvalidFragments
class _0RL_cd_33742A71C73D0017_73100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_73100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ServerFragments_var arg_0_;
  const Quentin::ServerFragments* arg_0;
  Quentin::ServerFragments_var arg_1_;
  const Quentin::ServerFragments* arg_1;
  Quentin::ClipPropertyList_var arg_2_;
  const Quentin::ClipPropertyList* arg_2;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_73100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ServerFragments&) *arg_0 >>= _n;
  (const Quentin::ServerFragments&) *arg_1 >>= _n;
  (const Quentin::ClipPropertyList&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_73100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::ServerFragments;
  (Quentin::ServerFragments&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_33742A71C73D0017_73100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_73100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_73100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId,
  Quentin::InvalidFragments::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_73100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::InvalidFragments::_PD_repoId) ) {
    Quentin::InvalidFragments _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_83100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_73100000* tcd = (_0RL_cd_33742A71C73D0017_73100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createDeltaFromFragments(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createDeltaFromFragments(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
  else {
    try {
      tcd->result = impl->createDeltaFromFragments(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::InvalidFragments& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::createDeltaFromFragments(const ::Quentin::ServerFragments& originalFragments, const ::Quentin::ServerFragments& laterFragments, const ::Quentin::ClipPropertyList& props)
{
  _0RL_cd_33742A71C73D0017_73100000 _call_desc(_0RL_lcfn_33742A71C73D0017_83100000, "createDeltaFromFragments", 25);
  _call_desc.arg_0 = &(::Quentin::ServerFragments&) originalFragments;
  _call_desc.arg_1 = &(::Quentin::ServerFragments&) laterFragments;
  _call_desc.arg_2 = &(::Quentin::ClipPropertyList&) props;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_clong_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_93100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_93100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_93100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_93100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_93100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_93100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_93100000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_93100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a3100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_93100000* tcd = (_0RL_cd_33742A71C73D0017_93100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPoolNumberedClip(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPoolNumberedClip(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getPoolNumberedClip(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::getPoolNumberedClip(::CORBA::Long number, ::CORBA::Long pool)
{
  _0RL_cd_33742A71C73D0017_93100000 _call_desc(_0RL_lcfn_33742A71C73D0017_a3100000, "getPoolNumberedClip", 20);
  _call_desc.arg_0 = number;
  _call_desc.arg_1 = pool;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_cQuentin_mClipPropertyList_i_cQuentin_mWStrings_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_b3100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_b3100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::WStrings_var arg_1_;
  const Quentin::WStrings* arg_1;
  ::CORBA::Long arg_2;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_b3100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::WStrings&) *arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_b3100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  (::CORBA::Long&)arg_2 <<= _n;

}

void _0RL_cd_33742A71C73D0017_b3100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_b3100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_b3100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_b3100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c3100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_b3100000* tcd = (_0RL_cd_33742A71C73D0017_b3100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->searchClips(*tcd->arg_0, *tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->searchClips(*tcd->arg_0, *tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->searchClips(*tcd->arg_0, *tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::searchClips(const ::Quentin::ClipPropertyList& props, const ::Quentin::WStrings& columns, ::CORBA::Long max)
{
  _0RL_cd_33742A71C73D0017_b3100000 _call_desc(_0RL_lcfn_33742A71C73D0017_c3100000, "searchClips", 12);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::WStrings&) columns;
  _call_desc.arg_2 = max;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuentin_mClipPropertyList_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_d3100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d3100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_d3100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_d3100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_33742A71C73D0017_d3100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_d3100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_d3100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_d3100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e3100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d3100000* tcd = (_0RL_cd_33742A71C73D0017_d3100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->countClips(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->countClips(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->countClips(*tcd->arg_0);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::countClips(const ::Quentin::ClipPropertyList& props)
{
  _0RL_cd_33742A71C73D0017_d3100000 _call_desc(_0RL_lcfn_33742A71C73D0017_e3100000, "countClips", 11);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_cQuentin_mClipPropertyList_i_cQuentin_mWStrings_i_clong_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_f3100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_f3100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::WStrings_var arg_1_;
  const Quentin::WStrings* arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_f3100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::WStrings&) *arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_33742A71C73D0017_f3100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_33742A71C73D0017_f3100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_f3100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_f3100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_f3100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_04100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_f3100000* tcd = (_0RL_cd_33742A71C73D0017_f3100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->searchClipsWithOffset(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    tcd->result = impl->searchClipsWithOffset(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      tcd->result = impl->searchClipsWithOffset(*tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::searchClipsWithOffset(const ::Quentin::ClipPropertyList& props, const ::Quentin::WStrings& columns, ::CORBA::Long offset, ::CORBA::Long max)
{
  _0RL_cd_33742A71C73D0017_f3100000 _call_desc(_0RL_lcfn_33742A71C73D0017_04100000, "searchClipsWithOffset", 22);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::WStrings&) columns;
  _call_desc.arg_2 = offset;
  _call_desc.arg_3 = max;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_cQuentin_mClipPropertyList_i_cQuentin_mWStrings_i_cQuentin_mSortOrderList_i_clong_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_14100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_14100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::ClipPropertyList_var arg_0_;
  const Quentin::ClipPropertyList* arg_0;
  Quentin::WStrings_var arg_1_;
  const Quentin::WStrings* arg_1;
  Quentin::SortOrderList_var arg_2_;
  const Quentin::SortOrderList* arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Long arg_4;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_14100000::marshalArguments(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) *arg_0 >>= _n;
  (const Quentin::WStrings&) *arg_1 >>= _n;
  (const Quentin::SortOrderList&) *arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_33742A71C73D0017_14100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new Quentin::WStrings;
  (Quentin::WStrings&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new Quentin::SortOrderList;
  (Quentin::SortOrderList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();
  (::CORBA::Long&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

void _0RL_cd_33742A71C73D0017_14100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_14100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_14100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_14100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_24100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_14100000* tcd = (_0RL_cd_33742A71C73D0017_14100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->orderedSearchClips(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    tcd->result = impl->orderedSearchClips(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      tcd->result = impl->orderedSearchClips(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::orderedSearchClips(const ::Quentin::ClipPropertyList& props, const ::Quentin::WStrings& columns, const ::Quentin::SortOrderList& order, ::CORBA::Long offset, ::CORBA::Long max)
{
  _0RL_cd_33742A71C73D0017_14100000 _call_desc(_0RL_lcfn_33742A71C73D0017_24100000, "orderedSearchClips", 19);
  _call_desc.arg_0 = &(::Quentin::ClipPropertyList&) props;
  _call_desc.arg_1 = &(::Quentin::WStrings&) columns;
  _call_desc.arg_2 = &(::Quentin::SortOrderList&) order;
  _call_desc.arg_3 = offset;
  _call_desc.arg_4 = max;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_34100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_9c000000* tcd = (_0RL_cd_33742A71C73D0017_9c000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getTaggedClips(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getTaggedClips(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getTaggedClips(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::Longs* Quentin::_objref_ZonePortal::getTaggedClips(const ::CORBA::WChar* tag, const ::CORBA::WChar* keys)
{
  _0RL_cd_33742A71C73D0017_9c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_34100000, "getTaggedClips", 15);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = keys;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mFormatInfo_i_cshort_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_44100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_44100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quentin::FormatCode arg_0;
  Quentin::FormatInfo_var result;
};

void _0RL_cd_33742A71C73D0017_44100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_44100000::unmarshalArguments(cdrStream& _n)
{
  (Quentin::FormatCode&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_44100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::FormatInfo&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_44100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::FormatInfo;
  (Quentin::FormatInfo&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_44100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_44100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_54100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_44100000* tcd = (_0RL_cd_33742A71C73D0017_44100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFormatInfo(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFormatInfo(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getFormatInfo(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::FormatInfo* Quentin::_objref_ZonePortal::getFormatInfo(::Quentin::FormatCode format)
{
  _0RL_cd_33742A71C73D0017_44100000 _call_desc(_0RL_lcfn_33742A71C73D0017_54100000, "getFormatInfo", 14);
  _call_desc.arg_0 = format;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_64100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_83000000* tcd = (_0RL_cd_33742A71C73D0017_83000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->getThumbnailSize(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::getThumbnailSize(::CORBA::Long mode, ::CORBA::Long& width, ::CORBA::Long& height)
{
  _0RL_cd_33742A71C73D0017_83000000 _call_desc(_0RL_lcfn_33742A71C73D0017_64100000, "getThumbnailSize", 17);
  _call_desc.arg_0 = mode;

  _invoke(_call_desc);
  width = _call_desc.arg_1;
  height = _call_desc.arg_2;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_74100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_cc000000* tcd = (_0RL_cd_33742A71C73D0017_cc000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->requestThumbnails(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
#else
  if (!cd->is_upcall())
    tcd->result = impl->requestThumbnails(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
  else {
    try {
      tcd->result = impl->requestThumbnails(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::requestThumbnails(::CORBA::Long mode, const ::Quentin::PositionData& fragment, ::CORBA::Long offset, ::CORBA::Long stride, ::CORBA::Long count, ::CORBA::Long ident, ::Quentin::ThumbnailListener_ptr listener)
{
  _0RL_cd_33742A71C73D0017_cc000000 _call_desc(_0RL_lcfn_33742A71C73D0017_74100000, "requestThumbnails", 18);
  _call_desc.arg_0 = mode;
  _call_desc.arg_1 = &(::Quentin::PositionData&) fragment;
  _call_desc.arg_2 = offset;
  _call_desc.arg_3 = stride;
  _call_desc.arg_4 = count;
  _call_desc.arg_5 = ident;
  _call_desc.arg_6 = listener;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_84100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  impl->abortThumbnails(tcd->arg_0);


}

void Quentin::_objref_ZonePortal::abortThumbnails(::CORBA::Long abortID)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_84100000, "abortThumbnails", 16);
  _call_desc.arg_0 = abortID;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_94100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getTicket();


}

::CORBA::Long Quentin::_objref_ZonePortal::getTicket()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_94100000, "getTicket", 10);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_a4100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_21000000* tcd = (_0RL_cd_33742A71C73D0017_21000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  impl->freeTicket(tcd->arg_0);


}

void Quentin::_objref_ZonePortal::freeTicket(::CORBA::Long ticket)
{
  _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a4100000, "freeTicket", 11);
  _call_desc.arg_0 = ticket;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b4100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getFreeTickets();


}

::CORBA::Long Quentin::_objref_ZonePortal::getFreeTickets()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b4100000, "getFreeTickets", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c4100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_4d000000* tcd = (_0RL_cd_33742A71C73D0017_4d000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->directQuery(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->directQuery(tcd->arg_0);
  else {
    try {
      tcd->result = impl->directQuery(tcd->arg_0);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::directQuery(const ::CORBA::WChar* command)
{
  _0RL_cd_33742A71C73D0017_4d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c4100000, "directQuery", 12);
  _call_desc.arg_0 = command;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_e_cQuentin_mBadColumnData_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_d4100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_d4100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
};

void _0RL_cd_33742A71C73D0017_d4100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_d4100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_d4100000::_user_exns[] = {
  Quentin::BadColumnData::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_d4100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadColumnData::_PD_repoId) ) {
    Quentin::BadColumnData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_e4100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_d4100000* tcd = (_0RL_cd_33742A71C73D0017_d4100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterAll(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->unregisterAll(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->unregisterAll(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::BadColumnData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::unregisterAll(::CORBA::Long database, ::CORBA::Long poolID)
{
  _0RL_cd_33742A71C73D0017_d4100000 _call_desc(_0RL_lcfn_33742A71C73D0017_e4100000, "unregisterAll", 14);
  _call_desc.arg_0 = database;
  _call_desc.arg_1 = poolID;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f4100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_6d000000* tcd = (_0RL_cd_33742A71C73D0017_6d000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getServerTime();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getServerTime();
  else {
    try {
      tcd->result = impl->getServerTime();
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::WChar* Quentin::_objref_ZonePortal::getServerTime()
{
  _0RL_cd_33742A71C73D0017_6d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f4100000, "getServerTime", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cwstring_i_cwstring_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_05100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_05100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::WString_var result;
};

void _0RL_cd_33742A71C73D0017_05100000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_33742A71C73D0017_05100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_33742A71C73D0017_05100000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalWString(result,0);

}

void _0RL_cd_33742A71C73D0017_05100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalWString(0);

}

const char* const _0RL_cd_33742A71C73D0017_05100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_05100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_15100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_05100000* tcd = (_0RL_cd_33742A71C73D0017_05100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getSequence(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getSequence(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getSequence(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::WChar* Quentin::_objref_ZonePortal::getSequence(const ::CORBA::WChar* prefix)
{
  _0RL_cd_33742A71C73D0017_05100000 _call_desc(_0RL_lcfn_33742A71C73D0017_15100000, "getSequence", 12);
  _call_desc.arg_0 = prefix;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_cboolean_i_cwstring_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_25100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_25100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Boolean arg_0;
  ::CORBA::WString_var arg_1_;
  const ::CORBA::WChar* arg_1;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_25100000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_33742A71C73D0017_25100000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_25100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_25100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_25100000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_25100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_35100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_25100000* tcd = (_0RL_cd_33742A71C73D0017_25100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getAreaNames(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getAreaNames(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getAreaNames(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::getAreaNames(::CORBA::Boolean search, const ::CORBA::WChar* propWanted)
{
  _0RL_cd_33742A71C73D0017_25100000 _call_desc(_0RL_lcfn_33742A71C73D0017_35100000, "getAreaNames", 13);
  _call_desc.arg_0 = search;
  _call_desc.arg_1 = propWanted;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mClipPropertyList_i_cwstring_i_cboolean_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_45100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_45100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::Boolean arg_1;
  Quentin::ClipPropertyList_var result;
};

void _0RL_cd_33742A71C73D0017_45100000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_33742A71C73D0017_45100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_33742A71C73D0017_45100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::ClipPropertyList&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_45100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_45100000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_45100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_55100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_45100000* tcd = (_0RL_cd_33742A71C73D0017_45100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getAreaPropertyList(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getAreaPropertyList(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getAreaPropertyList(tcd->arg_0, tcd->arg_1);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ClipPropertyList* Quentin::_objref_ZonePortal::getAreaPropertyList(const ::CORBA::WChar* areaName, ::CORBA::Boolean search)
{
  _0RL_cd_33742A71C73D0017_45100000 _call_desc(_0RL_lcfn_33742A71C73D0017_55100000, "getAreaPropertyList", 20);
  _call_desc.arg_0 = areaName;
  _call_desc.arg_1 = search;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cboolean_i_cQuentin_mClipPropertyList_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_65100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_65100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean arg_1;
  Quentin::ClipPropertyList_var arg_2_;
  const Quentin::ClipPropertyList* arg_2;
};

void _0RL_cd_33742A71C73D0017_65100000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalBoolean(arg_1);
  (const Quentin::ClipPropertyList&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_65100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1 = _n.unmarshalBoolean();
  arg_2_ = new Quentin::ClipPropertyList;
  (Quentin::ClipPropertyList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_33742A71C73D0017_65100000::_user_exns[] = {
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_65100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_75100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_65100000* tcd = (_0RL_cd_33742A71C73D0017_65100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setAreaProperties(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->setAreaProperties(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
  else {
    try {
      impl->setAreaProperties(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::setAreaProperties(const char* areaName, ::CORBA::Boolean search, const ::Quentin::ClipPropertyList& properties)
{
  _0RL_cd_33742A71C73D0017_65100000 _call_desc(_0RL_lcfn_33742A71C73D0017_75100000, "setAreaProperties", 18);
  _call_desc.arg_0 = areaName;
  _call_desc.arg_1 = search;
  _call_desc.arg_2 = &(::Quentin::ClipPropertyList&) properties;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_85100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_8d000000* tcd = (_0RL_cd_33742A71C73D0017_8d000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->queryFreed(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->queryFreed(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->queryFreed(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::queryFreed(::CORBA::Long poolID, const ::Quentin::Longs& clips)
{
  _0RL_cd_33742A71C73D0017_8d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_85100000, "queryFreed", 11);
  _call_desc.arg_0 = poolID;
  _call_desc.arg_1 = &(::Quentin::Longs&) clips;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_95100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_68000000* tcd = (_0RL_cd_33742A71C73D0017_68000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFreeProtons(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFreeProtons(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getFreeProtons(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::LongLong Quentin::_objref_ZonePortal::getFreeProtons(::CORBA::Long poolIdent)
{
  _0RL_cd_33742A71C73D0017_68000000 _call_desc(_0RL_lcfn_33742A71C73D0017_95100000, "getFreeProtons", 15);
  _call_desc.arg_0 = poolIdent;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_cQuentin_mFormatCodes_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_a5100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a5100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::FormatCodes_var arg_1_;
  const Quentin::FormatCodes* arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_33742A71C73D0017_a5100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quentin::FormatCodes&) *arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_a5100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quentin::FormatCodes;
  (Quentin::FormatCodes&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_33742A71C73D0017_a5100000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_33742A71C73D0017_a5100000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_a5100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_a5100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b5100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a5100000* tcd = (_0RL_cd_33742A71C73D0017_a5100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFreeFrames(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFreeFrames(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->getFreeFrames(tcd->arg_0, *tcd->arg_1);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::getFreeFrames(::CORBA::Long poolIdent, const ::Quentin::FormatCodes& formats)
{
  _0RL_cd_33742A71C73D0017_a5100000 _call_desc(_0RL_lcfn_33742A71C73D0017_b5100000, "getFreeFrames", 14);
  _call_desc.arg_0 = poolIdent;
  _call_desc.arg_1 = &(::Quentin::FormatCodes&) formats;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c5100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getZoneNumber();


}

::CORBA::Long Quentin::_objref_ZonePortal::getZoneNumber()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c5100000, "getZoneNumber", 14);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_d5100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_ed000000* tcd = (_0RL_cd_33742A71C73D0017_ed000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getZones(tcd->arg_0);


}

Quentin::Longs* Quentin::_objref_ZonePortal::getZones(::CORBA::Boolean upOnly)
{
  _0RL_cd_33742A71C73D0017_ed000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d5100000, "getZones", 9);
  _call_desc.arg_0 = upOnly;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mZonePortal_i_clong_e_cQuentin_mBadIdent_e_cQuentin_mZoneInaccessable
class _0RL_cd_33742A71C73D0017_e5100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_e5100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quentin::ZonePortal_var result;
};

void _0RL_cd_33742A71C73D0017_e5100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_e5100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_e5100000::marshalReturnedValues(cdrStream& _n)
{
  Quentin::ZonePortal::_marshalObjRef(result,_n);

}

void _0RL_cd_33742A71C73D0017_e5100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = Quentin::ZonePortal::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_33742A71C73D0017_e5100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::ZoneInaccessable::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_e5100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::ZoneInaccessable::_PD_repoId) ) {
    Quentin::ZoneInaccessable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_f5100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_e5100000* tcd = (_0RL_cd_33742A71C73D0017_e5100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getZonePortal(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getZonePortal(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getZonePortal(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::ZoneInaccessable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::ZonePortal_ptr Quentin::_objref_ZonePortal::getZonePortal(::CORBA::Long zoneID)
{
  _0RL_cd_33742A71C73D0017_e5100000 _call_desc(_0RL_lcfn_33742A71C73D0017_f5100000, "getZonePortal", 14);
  _call_desc.arg_0 = zoneID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cwstring_i_clong_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_06100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_06100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::WString_var result;
};

void _0RL_cd_33742A71C73D0017_06100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_33742A71C73D0017_06100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_33742A71C73D0017_06100000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalWString(result,0);

}

void _0RL_cd_33742A71C73D0017_06100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalWString(0);

}

const char* const _0RL_cd_33742A71C73D0017_06100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_06100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_16100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_06100000* tcd = (_0RL_cd_33742A71C73D0017_06100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getZoneName(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getZoneName(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getZoneName(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::WChar* Quentin::_objref_ZonePortal::getZoneName(::CORBA::Long zoneID)
{
  _0RL_cd_33742A71C73D0017_06100000 _call_desc(_0RL_lcfn_33742A71C73D0017_16100000, "getZoneName", 12);
  _call_desc.arg_0 = zoneID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_26100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_cf000000* tcd = (_0RL_cd_33742A71C73D0017_cf000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->zoneIsRemote(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->zoneIsRemote(tcd->arg_0);
  else {
    try {
      tcd->result = impl->zoneIsRemote(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quentin::_objref_ZonePortal::zoneIsRemote(::CORBA::Long zoneID)
{
  _0RL_cd_33742A71C73D0017_cf000000 _call_desc(_0RL_lcfn_33742A71C73D0017_26100000, "zoneIsRemote", 13);
  _call_desc.arg_0 = zoneID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_36100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_60000000* tcd = (_0RL_cd_33742A71C73D0017_60000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->maxAAFRecord();


}

::CORBA::Long Quentin::_objref_ZonePortal::maxAAFRecord()
{
  _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_36100000, "maxAAFRecord", 13);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_cQuentin_mRawData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_46100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_46100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::RawData_var arg_2_;
  const Quentin::RawData* arg_2;
};

void _0RL_cd_33742A71C73D0017_46100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  (const Quentin::RawData&) *arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_46100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = new Quentin::RawData;
  (Quentin::RawData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_33742A71C73D0017_46100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_46100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_56100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_46100000* tcd = (_0RL_cd_33742A71C73D0017_46100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->putAAF(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->putAAF(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
  else {
    try {
      impl->putAAF(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::putAAF(::CORBA::Long clipID, ::CORBA::Long record, const ::Quentin::RawData& data)
{
  _0RL_cd_33742A71C73D0017_46100000 _call_desc(_0RL_lcfn_33742A71C73D0017_56100000, "putAAF", 7);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = record;
  _call_desc.arg_2 = &(::Quentin::RawData&) data;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_66100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_bb000000* tcd = (_0RL_cd_33742A71C73D0017_bb000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->aafRecordLength(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->aafRecordLength(tcd->arg_0);
  else {
    try {
      tcd->result = impl->aafRecordLength(tcd->arg_0);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::aafRecordLength(::CORBA::Long clipId)
{
  _0RL_cd_33742A71C73D0017_bb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_66100000, "aafRecordLength", 16);
  _call_desc.arg_0 = clipId;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_o_cQuentin_mRawData_e_cQuentin_mBadIdent_e_cQuentin_mDatabaseError
class _0RL_cd_33742A71C73D0017_76100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_76100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  Quentin::RawData_var arg_2;
};

void _0RL_cd_33742A71C73D0017_76100000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_33742A71C73D0017_76100000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_33742A71C73D0017_76100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::RawData&) arg_2 >>= _n;

}

void _0RL_cd_33742A71C73D0017_76100000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_2 = new Quentin::RawData;
  (Quentin::RawData&)arg_2 <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_76100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId,
  Quentin::DatabaseError::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_76100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, Quentin::DatabaseError::_PD_repoId) ) {
    Quentin::DatabaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_86100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_76100000* tcd = (_0RL_cd_33742A71C73D0017_76100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->getAAF(tcd->arg_0, tcd->arg_1, tcd->arg_2.out());
#else
  if (!cd->is_upcall())
    impl->getAAF(tcd->arg_0, tcd->arg_1, tcd->arg_2.out());
  else {
    try {
      impl->getAAF(tcd->arg_0, tcd->arg_1, tcd->arg_2.out());
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void Quentin::_objref_ZonePortal::getAAF(::CORBA::Long clipID, ::CORBA::Long record, ::Quentin::RawData_out data)
{
  _0RL_cd_33742A71C73D0017_76100000 _call_desc(_0RL_lcfn_33742A71C73D0017_86100000, "getAAF", 7);
  _call_desc.arg_0 = clipID;
  _call_desc.arg_1 = record;

  _invoke(_call_desc);
  data = _call_desc.arg_2._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_96100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_20000000* tcd = (_0RL_cd_33742A71C73D0017_20000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
  tcd->result = impl->getLoggingRoles();


}

Quentin::WStrings* Quentin::_objref_ZonePortal::getLoggingRoles()
{
  _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_96100000, "getLoggingRoles", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cQuentin_mWStrings_i_cwstring_e_cQuentin_mBadIdent
class _0RL_cd_33742A71C73D0017_a6100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_33742A71C73D0017_a6100000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  Quentin::WStrings_var result;
};

void _0RL_cd_33742A71C73D0017_a6100000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_33742A71C73D0017_a6100000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_33742A71C73D0017_a6100000::marshalReturnedValues(cdrStream& _n)
{
  (const Quentin::WStrings&) result >>= _n;

}

void _0RL_cd_33742A71C73D0017_a6100000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Quentin::WStrings;
  (Quentin::WStrings&)result <<= _n;

}

const char* const _0RL_cd_33742A71C73D0017_a6100000::_user_exns[] = {
  Quentin::BadIdent::_PD_repoId
};

void _0RL_cd_33742A71C73D0017_a6100000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quentin::BadIdent::_PD_repoId) ) {
    Quentin::BadIdent _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_b6100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_a6100000* tcd = (_0RL_cd_33742A71C73D0017_a6100000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getLoggingRoleNames(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getLoggingRoleNames(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getLoggingRoleNames(tcd->arg_0);
    }
    catch(Quentin::BadIdent& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

Quentin::WStrings* Quentin::_objref_ZonePortal::getLoggingRoleNames(const ::CORBA::WChar* role)
{
  _0RL_cd_33742A71C73D0017_a6100000 _call_desc(_0RL_lcfn_33742A71C73D0017_b6100000, "getLoggingRoleNames", 20);
  _call_desc.arg_0 = role;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_33742A71C73D0017_c6100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_33742A71C73D0017_bb000000* tcd = (_0RL_cd_33742A71C73D0017_bb000000*)cd;
  Quentin::_impl_ZonePortal* impl = (Quentin::_impl_ZonePortal*) svnt->_ptrToInterface(Quentin::ZonePortal::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->lastAAFRecord(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->lastAAFRecord(tcd->arg_0);
  else {
    try {
      tcd->result = impl->lastAAFRecord(tcd->arg_0);
    }
    catch(Quentin::DatabaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quentin::_objref_ZonePortal::lastAAFRecord(::CORBA::Long clipID)
{
  _0RL_cd_33742A71C73D0017_bb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c6100000, "lastAAFRecord", 14);
  _call_desc.arg_0 = clipID;

  _invoke(_call_desc);
  return _call_desc.result;


}
Quentin::_pof_ZonePortal::~_pof_ZonePortal() {}


omniObjRef*
Quentin::_pof_ZonePortal::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quentin::_objref_ZonePortal(ior, id);
}


::CORBA::Boolean
Quentin::_pof_ZonePortal::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quentin::ZonePortal::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, Quentin::Properties::_PD_repoId) )
    return 1;


  return 0;
}

const Quentin::_pof_ZonePortal _the_pof_Quentin_mZonePortal;

Quentin::_impl_ZonePortal::~_impl_ZonePortal() {}


::CORBA::Boolean
Quentin::_impl_ZonePortal::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "majorIDLVersion") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_dd000000, "majorIDLVersion", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getServers") ) {

    _0RL_cd_33742A71C73D0017_ed000000 _call_desc(_0RL_lcfn_33742A71C73D0017_fd000000, "getServers", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getServer") ) {

    _0RL_cd_33742A71C73D0017_0e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1e000000, "getServer", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPools") ) {

    _0RL_cd_33742A71C73D0017_55000000 _call_desc(_0RL_lcfn_33742A71C73D0017_2e000000, "getPools", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPoolSpace") ) {

    _0RL_cd_33742A71C73D0017_3e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_4e000000, "getPoolSpace", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPoolServer") ) {

    _0RL_cd_33742A71C73D0017_0e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5e000000, "getPoolServer", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getServerSpace") ) {

    _0RL_cd_33742A71C73D0017_3e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_6e000000, "getServerSpace", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPoolInfo") ) {

    _0RL_cd_33742A71C73D0017_7e000000 _call_desc(_0RL_lcfn_33742A71C73D0017_8e000000, "getPoolInfo", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDirViewer") ) {

    _0RL_cd_33742A71C73D0017_44000000 _call_desc(_0RL_lcfn_33742A71C73D0017_9e000000, "getDirViewer", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPoolDirViewer") ) {

    _0RL_cd_33742A71C73D0017_ae000000 _call_desc(_0RL_lcfn_33742A71C73D0017_be000000, "getPoolDirViewer", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addStateChangeListener") ) {

    _0RL_cd_33742A71C73D0017_ce000000 _call_desc(_0RL_lcfn_33742A71C73D0017_de000000, "addStateChangeListener", 23, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addNamedStateChangeListener") ) {

    _0RL_cd_33742A71C73D0017_ee000000 _call_desc(_0RL_lcfn_33742A71C73D0017_fe000000, "addNamedStateChangeListener", 28, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeStateChangeListener") ) {

    _0RL_cd_33742A71C73D0017_0f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_1f000000, "removeStateChangeListener", 26, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getStateChanges") ) {

    _0RL_cd_33742A71C73D0017_2f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_3f000000, "getStateChanges", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCopyRemaining") ) {

    _0RL_cd_33742A71C73D0017_4f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_5f000000, "getCopyRemaining", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCopiesRemaining") ) {

    _0RL_cd_33742A71C73D0017_6f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_7f000000, "getCopiesRemaining", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCopyMap") ) {

    _0RL_cd_33742A71C73D0017_8f000000 _call_desc(_0RL_lcfn_33742A71C73D0017_9f000000, "getCopyMap", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deleteCopy") ) {

    _0RL_cd_33742A71C73D0017_da000000 _call_desc(_0RL_lcfn_33742A71C73D0017_af000000, "deleteCopy", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ticketCopy") ) {

    _0RL_cd_33742A71C73D0017_f4000000 _call_desc(_0RL_lcfn_33742A71C73D0017_bf000000, "ticketCopy", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "tryToTicketCopy") ) {

    _0RL_cd_33742A71C73D0017_cf000000 _call_desc(_0RL_lcfn_33742A71C73D0017_df000000, "tryToTicketCopy", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unticketCopy") ) {

    _0RL_cd_33742A71C73D0017_ef000000 _call_desc(_0RL_lcfn_33742A71C73D0017_ff000000, "unticketCopy", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addTag") ) {

    _0RL_cd_33742A71C73D0017_00100000 _call_desc(_0RL_lcfn_33742A71C73D0017_10100000, "addTag", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeTag") ) {

    _0RL_cd_33742A71C73D0017_00100000 _call_desc(_0RL_lcfn_33742A71C73D0017_20100000, "removeTag", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTags") ) {

    _0RL_cd_33742A71C73D0017_30100000 _call_desc(_0RL_lcfn_33742A71C73D0017_40100000, "getTags", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTimecodes") ) {

    _0RL_cd_33742A71C73D0017_50100000 _call_desc(_0RL_lcfn_33742A71C73D0017_60100000, "getTimecodes", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "refresh") ) {

    _0RL_cd_33742A71C73D0017_e1000000 _call_desc(_0RL_lcfn_33742A71C73D0017_70100000, "refresh", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getColumnDescriptions") ) {

    _0RL_cd_33742A71C73D0017_f8000000 _call_desc(_0RL_lcfn_33742A71C73D0017_80100000, "getColumnDescriptions", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createClip") ) {

    _0RL_cd_33742A71C73D0017_39000000 _call_desc(_0RL_lcfn_33742A71C73D0017_90100000, "createClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createPlacedClip") ) {

    _0RL_cd_33742A71C73D0017_a0100000 _call_desc(_0RL_lcfn_33742A71C73D0017_b0100000, "createPlacedClip", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "findFragsOnPools") ) {

    _0RL_cd_33742A71C73D0017_79000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c0100000, "findFragsOnPools", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "findClipOnPools") ) {

    _0RL_cd_33742A71C73D0017_99000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d0100000, "findClipOnPools", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllFragments") ) {

    _0RL_cd_33742A71C73D0017_b9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e0100000, "getAllFragments", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFragments") ) {

    _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f0100000, "getFragments", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFragmentsWithMode") ) {

    _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_01100000, "getFragmentsWithMode", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTypeFragments") ) {

    _0RL_cd_33742A71C73D0017_1a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_11100000, "getTypeFragments", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSubTypeFragments") ) {

    _0RL_cd_33742A71C73D0017_f9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_21100000, "getSubTypeFragments", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTrackFragments") ) {

    _0RL_cd_33742A71C73D0017_d9000000 _call_desc(_0RL_lcfn_33742A71C73D0017_31100000, "getTrackFragments", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSubTrackFragments") ) {

    _0RL_cd_33742A71C73D0017_5a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_41100000, "getSubTrackFragments", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSourceTimecode") ) {

    _0RL_cd_33742A71C73D0017_7a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_51100000, "getSourceTimecode", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRefTimecode") ) {

    _0RL_cd_33742A71C73D0017_7a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_61100000, "getRefTimecode", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getClipData") ) {

    _0RL_cd_33742A71C73D0017_9a000000 _call_desc(_0RL_lcfn_33742A71C73D0017_71100000, "getClipData", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "updateClip") ) {

    _0RL_cd_33742A71C73D0017_ba000000 _call_desc(_0RL_lcfn_33742A71C73D0017_81100000, "updateClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setClipProtection") ) {

    _0RL_cd_33742A71C73D0017_91100000 _call_desc(_0RL_lcfn_33742A71C73D0017_a1100000, "setClipProtection", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deleteClip") ) {

    _0RL_cd_33742A71C73D0017_da000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b1100000, "deleteClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "trimUnrecorded") ) {

    _0RL_cd_33742A71C73D0017_fa000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c1100000, "trimUnrecorded", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "numberClip") ) {

    _0RL_cd_33742A71C73D0017_1b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d1100000, "numberClip", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "scanNumbers") ) {

    _0RL_cd_33742A71C73D0017_3b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_e1100000, "scanNumbers", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cloneClip") ) {

    _0RL_cd_33742A71C73D0017_5b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f1100000, "cloneClip", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cloneClipInterZone") ) {

    _0RL_cd_33742A71C73D0017_02100000 _call_desc(_0RL_lcfn_33742A71C73D0017_12100000, "cloneClipInterZone", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cloneClipInterZoneWithoutHistory") ) {

    _0RL_cd_33742A71C73D0017_02100000 _call_desc(_0RL_lcfn_33742A71C73D0017_22100000, "cloneClipInterZoneWithoutHistory", 33, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "cloneIfNeeded") ) {

    _0RL_cd_33742A71C73D0017_7b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_32100000, "cloneIfNeeded", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "replaceContent") ) {

    _0RL_cd_33742A71C73D0017_9b000000 _call_desc(_0RL_lcfn_33742A71C73D0017_42100000, "replaceContent", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createPlaceholder") ) {

    _0RL_cd_33742A71C73D0017_52100000 _call_desc(_0RL_lcfn_33742A71C73D0017_62100000, "createPlaceholder", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clonePlaceholder") ) {

    _0RL_cd_33742A71C73D0017_72100000 _call_desc(_0RL_lcfn_33742A71C73D0017_82100000, "clonePlaceholder", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createExtPlaceholder") ) {

    _0RL_cd_33742A71C73D0017_92100000 _call_desc(_0RL_lcfn_33742A71C73D0017_a2100000, "createExtPlaceholder", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPlaceholderPools") ) {

    _0RL_cd_33742A71C73D0017_b2100000 _call_desc(_0RL_lcfn_33742A71C73D0017_c2100000, "getPlaceholderPools", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPlaceholderData") ) {

    _0RL_cd_33742A71C73D0017_d2100000 _call_desc(_0RL_lcfn_33742A71C73D0017_e2100000, "getPlaceholderData", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "fillPlaceholder") ) {

    _0RL_cd_33742A71C73D0017_f2100000 _call_desc(_0RL_lcfn_33742A71C73D0017_03100000, "fillPlaceholder", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "fillSinglePlaceholder") ) {

    _0RL_cd_33742A71C73D0017_13100000 _call_desc(_0RL_lcfn_33742A71C73D0017_23100000, "fillSinglePlaceholder", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "rushHighWater") ) {

    _0RL_cd_33742A71C73D0017_33100000 _call_desc(_0RL_lcfn_33742A71C73D0017_43100000, "rushHighWater", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createDeltaFromClips") ) {

    _0RL_cd_33742A71C73D0017_53100000 _call_desc(_0RL_lcfn_33742A71C73D0017_63100000, "createDeltaFromClips", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "createDeltaFromFragments") ) {

    _0RL_cd_33742A71C73D0017_73100000 _call_desc(_0RL_lcfn_33742A71C73D0017_83100000, "createDeltaFromFragments", 25, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPoolNumberedClip") ) {

    _0RL_cd_33742A71C73D0017_93100000 _call_desc(_0RL_lcfn_33742A71C73D0017_a3100000, "getPoolNumberedClip", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "searchClips") ) {

    _0RL_cd_33742A71C73D0017_b3100000 _call_desc(_0RL_lcfn_33742A71C73D0017_c3100000, "searchClips", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "countClips") ) {

    _0RL_cd_33742A71C73D0017_d3100000 _call_desc(_0RL_lcfn_33742A71C73D0017_e3100000, "countClips", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "searchClipsWithOffset") ) {

    _0RL_cd_33742A71C73D0017_f3100000 _call_desc(_0RL_lcfn_33742A71C73D0017_04100000, "searchClipsWithOffset", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "orderedSearchClips") ) {

    _0RL_cd_33742A71C73D0017_14100000 _call_desc(_0RL_lcfn_33742A71C73D0017_24100000, "orderedSearchClips", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTaggedClips") ) {

    _0RL_cd_33742A71C73D0017_9c000000 _call_desc(_0RL_lcfn_33742A71C73D0017_34100000, "getTaggedClips", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFormatInfo") ) {

    _0RL_cd_33742A71C73D0017_44100000 _call_desc(_0RL_lcfn_33742A71C73D0017_54100000, "getFormatInfo", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getThumbnailSize") ) {

    _0RL_cd_33742A71C73D0017_83000000 _call_desc(_0RL_lcfn_33742A71C73D0017_64100000, "getThumbnailSize", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requestThumbnails") ) {

    _0RL_cd_33742A71C73D0017_cc000000 _call_desc(_0RL_lcfn_33742A71C73D0017_74100000, "requestThumbnails", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "abortThumbnails") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_84100000, "abortThumbnails", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTicket") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_94100000, "getTicket", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "freeTicket") ) {

    _0RL_cd_33742A71C73D0017_21000000 _call_desc(_0RL_lcfn_33742A71C73D0017_a4100000, "freeTicket", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFreeTickets") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_b4100000, "getFreeTickets", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "directQuery") ) {

    _0RL_cd_33742A71C73D0017_4d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c4100000, "directQuery", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterAll") ) {

    _0RL_cd_33742A71C73D0017_d4100000 _call_desc(_0RL_lcfn_33742A71C73D0017_e4100000, "unregisterAll", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getServerTime") ) {

    _0RL_cd_33742A71C73D0017_6d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_f4100000, "getServerTime", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getSequence") ) {

    _0RL_cd_33742A71C73D0017_05100000 _call_desc(_0RL_lcfn_33742A71C73D0017_15100000, "getSequence", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAreaNames") ) {

    _0RL_cd_33742A71C73D0017_25100000 _call_desc(_0RL_lcfn_33742A71C73D0017_35100000, "getAreaNames", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAreaPropertyList") ) {

    _0RL_cd_33742A71C73D0017_45100000 _call_desc(_0RL_lcfn_33742A71C73D0017_55100000, "getAreaPropertyList", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setAreaProperties") ) {

    _0RL_cd_33742A71C73D0017_65100000 _call_desc(_0RL_lcfn_33742A71C73D0017_75100000, "setAreaProperties", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "queryFreed") ) {

    _0RL_cd_33742A71C73D0017_8d000000 _call_desc(_0RL_lcfn_33742A71C73D0017_85100000, "queryFreed", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFreeProtons") ) {

    _0RL_cd_33742A71C73D0017_68000000 _call_desc(_0RL_lcfn_33742A71C73D0017_95100000, "getFreeProtons", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFreeFrames") ) {

    _0RL_cd_33742A71C73D0017_a5100000 _call_desc(_0RL_lcfn_33742A71C73D0017_b5100000, "getFreeFrames", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getZoneNumber") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c5100000, "getZoneNumber", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getZones") ) {

    _0RL_cd_33742A71C73D0017_ed000000 _call_desc(_0RL_lcfn_33742A71C73D0017_d5100000, "getZones", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getZonePortal") ) {

    _0RL_cd_33742A71C73D0017_e5100000 _call_desc(_0RL_lcfn_33742A71C73D0017_f5100000, "getZonePortal", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getZoneName") ) {

    _0RL_cd_33742A71C73D0017_06100000 _call_desc(_0RL_lcfn_33742A71C73D0017_16100000, "getZoneName", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "zoneIsRemote") ) {

    _0RL_cd_33742A71C73D0017_cf000000 _call_desc(_0RL_lcfn_33742A71C73D0017_26100000, "zoneIsRemote", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "maxAAFRecord") ) {

    _0RL_cd_33742A71C73D0017_60000000 _call_desc(_0RL_lcfn_33742A71C73D0017_36100000, "maxAAFRecord", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "putAAF") ) {

    _0RL_cd_33742A71C73D0017_46100000 _call_desc(_0RL_lcfn_33742A71C73D0017_56100000, "putAAF", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "aafRecordLength") ) {

    _0RL_cd_33742A71C73D0017_bb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_66100000, "aafRecordLength", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAAF") ) {

    _0RL_cd_33742A71C73D0017_76100000 _call_desc(_0RL_lcfn_33742A71C73D0017_86100000, "getAAF", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLoggingRoles") ) {

    _0RL_cd_33742A71C73D0017_20000000 _call_desc(_0RL_lcfn_33742A71C73D0017_96100000, "getLoggingRoles", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLoggingRoleNames") ) {

    _0RL_cd_33742A71C73D0017_a6100000 _call_desc(_0RL_lcfn_33742A71C73D0017_b6100000, "getLoggingRoleNames", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "lastAAFRecord") ) {

    _0RL_cd_33742A71C73D0017_bb000000 _call_desc(_0RL_lcfn_33742A71C73D0017_c6100000, "lastAAFRecord", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


#ifndef _MSC_VER
  if( _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Properties*)this)->
      _impl_Properties::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
Quentin::_impl_ZonePortal::_ptrToInterface(const char* id)
{
  if( id == ::Quentin::ZonePortal::_PD_repoId )
    return (::Quentin::_impl_ZonePortal*) this;
  if( id == ::Quentin::Properties::_PD_repoId )
    return (::Quentin::_impl_Properties*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quentin::ZonePortal::_PD_repoId) )
    return (::Quentin::_impl_ZonePortal*) this;
  if( omni::strMatch(id, ::Quentin::Properties::_PD_repoId) )
    return (::Quentin::_impl_Properties*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quentin::_impl_ZonePortal::_mostDerivedRepoId()
{
  return ::Quentin::ZonePortal::_PD_repoId;
}

POA_Quentin::Properties::~Properties() {}

POA_Quentin::EffectController::~EffectController() {}

POA_Quentin::ThumbnailListener::~ThumbnailListener() {}

POA_Quentin::PortListener::~PortListener() {}

POA_Quentin::StateChangeListener::~StateChangeListener() {}

POA_Quentin::Port::~Port() {}

POA_Quentin::Server::~Server() {}

POA_Quentin::DirectoryViewer::~DirectoryViewer() {}

POA_Quentin::ZonePortal::~ZonePortal() {}
